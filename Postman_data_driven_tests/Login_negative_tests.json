{
  "info": {
    "_postman_id": "0f123365-697e-4721-9e1b-1d5361f4de8e",
    "name": "/login endpoint data driven tests | Negative tests [GitHub Actions]",
    "description": "### Collection of tests for endpoint /login of the GAD application.\n\n**The collection is part of my portfolio presenting my skills in working with Postman. Details available at:** [https://github.com/PrzemekKozakQA/GAD-Postman-tests](https://github.com/PrzemekKozakQA/GAD-Postman-tests)\n\nThe collection contains data-driven negative tests.\n\nThe data for testing is in the file Login_negative_data.json\n\nInstructions for installing and running the GAD application locally are available in the documentation: [https://github.com/jaktestowac/gad-gui-api-demo](https://github.com/jaktestowac/gad-gui-api-demo)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21196236",
    "_collection_link": "https://www.postman.com/p-k-qa/workspace/gad-postman-tests/collection/21196236-0f123365-697e-4721-9e1b-1d5361f4de8e?action=share&source=collection_link&creator=21196236"
  },
  "item": [
    {
      "name": "Login failed with invalid credentials",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "let responseJson;\r",
              "\r",
              "const responseSchema = {\r",
              "    \"type\": \"object\",\r",
              "    \"properties\": {\r",
              "        \"status\": { \"type\": \"integer\", nullable: false },\r",
              "        \"message\": { \"type\": \"string\", nullable: false }\r",
              "    },\r",
              "    \"required\": [\"status\", \"message\"],\r",
              "    \"additionalProperties\": false\r",
              "};\r",
              "\r",
              "pm.test(\"Response status code is 401\", function () {\r",
              "    pm.response.to.have.status(401);\r",
              "});\r",
              "\r",
              "pm.test(\"Response has valid schema\", function () {\r",
              "    pm.response.to.has.jsonSchema(responseSchema);\r",
              "});\r",
              "\r",
              "pm.test(\"Response is in JSON format\", function () {\r",
              "    pm.response.to.be.json;\r",
              "    responseJson = pm.response.json();\r",
              "});\r",
              "\r",
              "pm.test(\"Response message is 'Incorrect email or password'\", function () {\r",
              "    const responseMessage = responseJson.message;\r",
              "    pm.expect(responseMessage).to.equal(\"Incorrect email or password\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}",
          "options": {
            "raw": {
              "headerFamily": "json",
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/login",
          "host": ["{{baseUrl}}"],
          "path": ["login"]
        }
      },
      "response": [
        {
          "name": "Login failed with invalid credentials",
          "originalRequest": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"Wrong-user\",\n    \"password\": \"{{correctUserPassword}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Date",
              "value": "Thu, 31 Aug 2023 09:56:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "CF-Ray",
              "value": "7ff467d65feec019-WAW"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "ETag",
              "value": "W/\"3f-QSn1acw6fvJi/R6Y2AW0LDQrdC4\""
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "pragma",
              "value": "no-cache"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "x-render-origin-server",
              "value": "Render"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "cookie": [],
          "body": "{\n    \"status\": 401,\n    \"message\": \"Incorrect email or password\"\n}"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "//displaying the request name in the console for better tracking of test execution\r",
          "console.log(`Running request: \\\"${pm.info.requestName}\\\"`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ]
}
