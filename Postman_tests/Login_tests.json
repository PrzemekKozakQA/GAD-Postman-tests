{
  "info": {
    "_postman_id": "a6b8820d-2069-44ba-a0a1-32b6d2205386",
    "name": "/login endpoint tests [GitHub Actions]",
    "description": "Collection of tests for the GAD application endpoint /login.  \nGAD documentation available at:  \n[https://github.com/jaktestowac/gad-gui-api-demo](https://github.com/jaktestowac/gad-gui-api-demo)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21196236"
  },
  "item": [
    {
      "name": "Login - positive",
      "item": [
        {
          "name": "Receives a token using valid credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData;\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseData = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has the required field - access_token\", function () {\r",
                  "    pm.expect(responseData).has.property('access_token');\r",
                  "    //second way to check the presence of a property token:\r",
                  "    //pm.expect(responseData.access_token).to.exist;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Data type of field - access_token is a string\", function () {\r",
                  "    pm.expect(responseData.access_token).to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"access_token is a non-empty string\", function () {\r",
                  "    pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "\r",
                  "    //setting env variable with token\r",
                  "    pm.environment.set('token', responseData.access_token);\r",
                  "\r",
                  "    //import 'Moment' library\r",
                  "    const moment = require('moment');\r",
                  "    //setting the exact moment of generating a new token\r",
                  "    pm.environment.set('tokenGenerationMoment', moment());\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"password\": \"{{correctUserPassword}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": [
            {
              "name": "Receives a token using valid credentials",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"password\": \"{{correctUserPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "216"
                },
                {
                  "key": "ETag",
                  "value": "W/\"d8-8s4bbOjGESnHooGpF3q85NRqBws\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:07:50 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"access_token\": \"example-of-token\"\n}"
            }
          ]
        }
      ],
      "description": "Given: Body with registered user's email and correct password  \nWhen: Sending a POST request to endpoint /login  \nThen: Receiving a response with a token and 200 code."
    },
    {
      "name": "Validate token - positive",
      "item": [
        {
          "name": "Login to receive token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"access_token is a non-empty string\", function () {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
                  "    pm.collectionVariables.set('userToken', responseJson.access_token);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"password\": \"{{correctUserPassword}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "The logged in user has a valid token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": ["pm.collectionVariables.unset('userToken');"],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {},
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ],
      "description": "Given: Body with valid token  \nWhen: Sending a GET request to endpoint /login  \nThen: Receiving a response with code 200.",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Response status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Validate wrong token - negative",
      "item": [
        {
          "name": "Wrong token is indicated as invalid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"The error message is correct\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Access token is invalid!\");\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {},
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "wrong-token",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Request without token - negative",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"The error message is correct\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Access token not provided!\");\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {},
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ],
      "description": "Given: Body with invalid token or no token  \nWhen: Sending a GET request to endpoint /login  \nThen: Receiving a response with a 401 code and appropriate message",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "const responseSchema = {\r",
              "    \"type\": \"object\",\r",
              "    \"properties\": {\r",
              "        \"error\": {\r",
              "            \"type\": \"object\",\r",
              "            \"properties\": {\r",
              "                \"message\": {\r",
              "                    \"type\": \"string\", nullable: false\r",
              "                }\r",
              "            },\r",
              "            \"required\": [\r",
              "                \"message\"\r",
              "            ]\r",
              "        }\r",
              "    },\r",
              "    \"required\": [\r",
              "        \"error\"\r",
              "    ]\r",
              "}\r",
              "\r",
              "pm.test(\"Response status code is 401\", function () {\r",
              "    pm.response.to.have.status(401);\r",
              "});\r",
              "\r",
              "pm.test(\"Response has valid schema\", function () {\r",
              "    pm.response.to.has.jsonSchema(responseSchema);\r",
              "});\r",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Login request with wrong method - negative",
      "item": [
        {
          "name": "PUT method",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{registeredUsersEmail}}\",\r\n    \"password\": \"{{correctUserPassword}}\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "PATCH method",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{registeredUsersEmail}}\",\r\n    \"password\": \"{{correctUserPassword}}\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "DELETE method",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{registeredUsersEmail}}\",\r\n    \"password\": \"{{correctUserPassword}}\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "HEAD method",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "HEAD",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{registeredUsersEmail}}\",\r\n    \"password\": \"{{correctUserPassword}}\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ],
      "description": "Given: Body with registered user's email and correct password  \nWhen: Sending a request other than POST and GET to endpoint /login  \nThen: Receiving a response with 404 token.",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test(\"Response does not contain any data\", function () {",
              "    pm.expect(pm.response.text().length).to.be.below(3);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Login request with broken body - negative",
      "item": [
        {
          "name": "Broken JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"password\": {{correctUserPassword}}\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "JSON in header, html in body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-type": true
            }
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<!DOCTYPE html>\n<html>\n\n<head>\n\t<title>Page Title</title>\n</head>\n\n<body>\n\n\t<h1>This is a Heading</h1>\n\t<p>This is a paragraph.</p>\n\n</body>\n\n</html>",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "html"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ],
      "description": "Given: Body with broken JSON  \nWhen: Sending a POST request to endpoint /login  \nThen: Receiving a response with 400 code.",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Login with incorrect body - negative",
      "item": [
        {
          "name": "No password property",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": [
            {
              "name": "No password property",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "63"
                },
                {
                  "key": "ETag",
                  "value": "W/\"3f-QSn1acw6fvJi/R6Y2AW0LDQrdC4\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:07:13 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": 401,\n    \"message\": \"Incorrect email or password\"\n}"
            }
          ]
        },
        {
          "name": "No login property",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{correctUserPassword}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": [
            {
              "name": "No login property",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"password\": \"{{correctUserPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "63"
                },
                {
                  "key": "ETag",
                  "value": "W/\"3f-QSn1acw6fvJi/R6Y2AW0LDQrdC4\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:07:01 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": 401,\n    \"message\": \"Incorrect email or password\"\n}"
            }
          ]
        },
        {
          "name": "No body in request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": [
            {
              "name": "No body in request",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "63"
                },
                {
                  "key": "ETag",
                  "value": "W/\"3f-QSn1acw6fvJi/R6Y2AW0LDQrdC4\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:06:51 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": 401,\n    \"message\": \"Incorrect email or password\"\n}"
            }
          ]
        },
        {
          "name": "Empty json in body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": [
            {
              "name": "Empty json in body",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "63"
                },
                {
                  "key": "ETag",
                  "value": "W/\"3f-QSn1acw6fvJi/R6Y2AW0LDQrdC4\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:06:20 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": 401,\n    \"message\": \"Incorrect email or password\"\n}"
            }
          ]
        },
        {
          "name": "List in body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "[\r\n    {\r\n        \"login\": \"{{registeredUsersEmail}}\",\r\n        \"password\": \"{{correctUserPassword}}\"\r\n    },\r\n    {\r\n        \"login\": \"newUser\",\r\n        \"password\": \"NewPassword\"\r\n    }\r\n]"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": [
            {
              "name": "List in body",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[\r\n    {\r\n        \"login\": \"{{registeredUsersEmail}}\",\r\n        \"password\": \"{{correctUserPassword}}\"\r\n    },\r\n    {\r\n        \"login\": \"newUser\",\r\n        \"password\": \"NewPassword\"\r\n    }\r\n]"
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "63"
                },
                {
                  "key": "ETag",
                  "value": "W/\"3f-QSn1acw6fvJi/R6Y2AW0LDQrdC4\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:06:06 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": 401,\n    \"message\": \"Incorrect email or password\"\n}"
            }
          ]
        },
        {
          "name": "Xml in body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "\n<email>{{registeredUsersEmail}}</email>\n<password>{{correctUserPassword}}</password>",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "xml"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": [
            {
              "name": "Xml in body",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "\n<email>{{registeredUsersEmail}}</email>\n<password>{{correctUserPassword}}</password>",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "xml"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "63"
                },
                {
                  "key": "ETag",
                  "value": "W/\"3f-QSn1acw6fvJi/R6Y2AW0LDQrdC4\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:05:57 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": 401,\n    \"message\": \"Incorrect email or password\"\n}"
            }
          ]
        },
        {
          "name": "Request without 'Content-Type' header",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-type": true
            }
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"password\": \"{{correctUserPassword}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": [
            {
              "name": "Request without 'Content-Type' header",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"password\": \"{{correctUserPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "63"
                },
                {
                  "key": "ETag",
                  "value": "W/\"3f-QSn1acw6fvJi/R6Y2AW0LDQrdC4\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:05:45 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": 401,\n    \"message\": \"Incorrect email or password\"\n}"
            }
          ]
        }
      ],
      "description": "Given: Body with incorrect body  \nWhen: Sending a POST request to endpoint /login  \nThen: Receiving a response with 401 code and message 'Incorrect email or password'",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let responseData;",
              "",
              "const responseSchema = {",
              "    \"type\": \"object\",",
              "    \"properties\": {",
              "        \"status\": {",
              "            \"type\": \"integer\", nullable: false",
              "        },",
              "        \"message\": {",
              "            \"type\": \"string\", nullable: false",
              "        }",
              "    },",
              "    \"required\": [\"status\", \"message\"]",
              "};",
              "",
              "pm.test(\"Response status code should be 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Response is in JSON format\", function () {",
              "    pm.response.to.be.json;",
              "    responseData = pm.response.json();",
              "});",
              "",
              "pm.test(\"Response has valid schema\", function () {",
              "    pm.response.to.has.jsonSchema(responseSchema);",
              "});",
              "",
              "pm.test(\"Message is a non-empty string\", function () {",
              "    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "pm.test(\"Response message is 'Incorrect email or password'\", function () {",
              "    const responseMessage = pm.response.json().message;",
              "    pm.expect(responseMessage).to.equal(\"Incorrect email or password\");",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "//displaying the request name in the console for better tracking of test execution\r",
          "console.log(pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ]
}
