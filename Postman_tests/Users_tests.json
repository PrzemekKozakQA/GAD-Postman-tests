{
  "info": {
    "_postman_id": "7e48a5a7-e7da-4e7c-8227-a07a732024f4",
    "name": "/users endpoint tests  [GitHub Actions]",
    "description": "### Collection of tests for endpoint /users of the GAD application.\n\n**The collection is part of my portfolio presenting my skills in working with Postman. Details available at:** [https://github.com/PrzemekKozakQA/GAD-Postman-tests](https://github.com/PrzemekKozakQA/GAD-Postman-tests)\n\nDescription of the test is available in the \"Overview\" tab of the individual test folders.\n\nInstructions for installing and running the GAD application locally are available in the documentation: [https://github.com/jaktestowac/gad-gui-api-demo](https://github.com/jaktestowac/gad-gui-api-demo)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21196236",
    "_collection_link": "https://www.postman.com/p-k-qa/workspace/gad-postman-tests/collection/21196236-7e48a5a7-e7da-4e7c-8227-a07a732024f4?action=share&source=collection_link&creator=21196236"
  },
  "item": [
    {
      "name": "Get users | Positive tests",
      "item": [
        {
          "name": "Get array with all users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "const responseSchema = {\r",
                  "    \"type\": \"array\",\r",
                  "    \"items\": {\r",
                  "        \"type\": \"object\",\r",
                  "        \"properties\": {\r",
                  "            \"id\": { \"type\": \"integer\", nullable: false },\r",
                  "            \"email\": { \"type\": \"string\", nullable: false },\r",
                  "            \"firstname\": { \"type\": \"string\", nullable: false },\r",
                  "            \"lastname\": { \"type\": \"string\", nullable: false },\r",
                  "            \"password\": { \"type\": \"string\", nullable: false },\r",
                  "            \"avatar\": { \"type\": \"string\", nullable: false }\r",
                  "        },\r",
                  "        \"required\": [\"id\", \"email\", \"firstname\", \"lastname\", \"password\", \"avatar\"],\r",
                  "        \"additionalProperties\": false\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response is not an empty array\", function () {\r",
                  "    pm.expect(responseJson).to.be.an('array').and.to.have.length.above(0);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Email, name and password property values ​​for all users are hidden\", function () {\r",
                  "    responseJson.forEach(user => {\r",
                  "        pm.expect(user.email).to.equal('****');\r",
                  "        pm.expect(user.lastname).to.equal('****');\r",
                  "        pm.expect(user.password).to.equal('****');\r",
                  "    });\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": [
            {
              "name": "Get array with all users",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Sun, 03 Sep 2023 13:27:39 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "CF-Ray",
                  "value": "800e54d5efd53bc0-WAW"
                },
                {
                  "key": "CF-Cache-Status",
                  "value": "DYNAMIC"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "ETag",
                  "value": "W/\"6e9-O+pK+G2gX34KvIU0wKYoz+X81L4\""
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "access-control-allow-credentials",
                  "value": "true"
                },
                {
                  "key": "content-security-policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "cross-origin-embedder-policy",
                  "value": "require-corp"
                },
                {
                  "key": "cross-origin-opener-policy",
                  "value": "same-origin"
                },
                {
                  "key": "cross-origin-resource-policy",
                  "value": "same-origin"
                },
                {
                  "key": "origin-agent-cluster",
                  "value": "?1"
                },
                {
                  "key": "pragma",
                  "value": "no-cache"
                },
                {
                  "key": "referrer-policy",
                  "value": "no-referrer"
                },
                {
                  "key": "x-content-type-options",
                  "value": "nosniff"
                },
                {
                  "key": "x-dns-prefetch-control",
                  "value": "off"
                },
                {
                  "key": "x-download-options",
                  "value": "noopen"
                },
                {
                  "key": "x-frame-options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "x-permitted-cross-domain-policies",
                  "value": "none"
                },
                {
                  "key": "x-render-origin-server",
                  "value": "Render"
                },
                {
                  "key": "x-xss-protection",
                  "value": "0"
                },
                {
                  "key": "Server",
                  "value": "cloudflare"
                },
                {
                  "key": "Content-Encoding",
                  "value": "br"
                },
                {
                  "key": "alt-svc",
                  "value": "h3=\":443\"; ma=86400"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"id\": 1,\n        \"email\": \"****\",\n        \"firstname\": \"Moses\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133479.7144732.jpg\"\n    },\n    {\n        \"id\": 2,\n        \"email\": \"****\",\n        \"firstname\": \"Danial\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133060.68834.jpg\"\n    },\n    {\n        \"id\": 3,\n        \"email\": \"****\",\n        \"firstname\": \"Daryl\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133063.620005.jpg\"\n    },\n    {\n        \"id\": 4,\n        \"email\": \"****\",\n        \"firstname\": \"Dortha\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133112.3790507.jpg\"\n    },\n    {\n        \"id\": 5,\n        \"email\": \"****\",\n        \"firstname\": \"Lenore\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133153.523801.jpg\"\n    },\n    {\n        \"id\": 6,\n        \"email\": \"****\",\n        \"firstname\": \"Kerra\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133363.1959925.jpg\"\n    },\n    {\n        \"id\": 7,\n        \"email\": \"****\",\n        \"firstname\": \"Mas\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133217.1529467.jpg\"\n    },\n    {\n        \"id\": 8,\n        \"email\": \"****\",\n        \"firstname\": \"Josh\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591134851.6068161.jpg\"\n    },\n    {\n        \"id\": 9,\n        \"email\": \"****\",\n        \"firstname\": \"Daryl\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591134851.6068265.jpg\"\n    },\n    {\n        \"id\": 10,\n        \"email\": \"****\",\n        \"firstname\": \"John\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591137202.609116_1.jpg\"\n    }\n]"
            }
          ]
        }
      ],
      "description": "Scenario: Get a list of all users  \nWhen: I send a GET request to the /users endpoint  \nThen: the response status should be 200  \nAnd: the response should contain a list of all users"
    },
    {
      "name": "Get user by ID | Positive tests",
      "item": [
        {
          "name": "Get user data after request with ID in path param",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"id\": { \"type\": \"integer\", nullable: false },\r",
                  "        \"email\": { \"type\": \"string\", nullable: false },\r",
                  "        \"firstname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"lastname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"password\": { \"type\": \"string\", nullable: false },\r",
                  "        \"avatar\": { \"type\": \"string\", nullable: false }\r",
                  "    },\r",
                  "    \"required\": [\"id\", \"email\", \"firstname\", \"lastname\", \"password\", \"avatar\"],\r",
                  "    \"additionalProperties\": false\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Value of the email, last name and password properties are hidden\", function () {\r",
                  "    pm.expect(responseJson.email).to.equal('****');\r",
                  "    pm.expect(responseJson.lastname).to.equal('****');\r",
                  "    pm.expect(responseJson.password).to.equal('****');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{existingUserID}}"
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": [
            {
              "name": "Get user data after request with ID in path param",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{existingUserID}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "159"
                },
                {
                  "key": "ETag",
                  "value": "W/\"9f-+Ei5pNyIj1bC/N0M7Jkw7d3zqj0\""
                },
                {
                  "key": "Date",
                  "value": "Wed, 05 Mar 2025 19:43:37 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"id\": 1,\n    \"email\": \"****\",\n    \"firstname\": \"Moses\",\n    \"lastname\": \"****\",\n    \"password\": \"****\",\n    \"avatar\": \".\\\\data\\\\users\\\\face_1591133479.7144732.jpg\"\n}"
            }
          ]
        }
      ],
      "description": "Scenario: Get user data by ID  \nGiven: an existing user ID in the path parameter of the request  \nWhen: I send a GET request to the /users/{id} endpoint  \nThen: the response status should be 200  \nAnd: the response should contain a JSON object with the user's data"
    },
    {
      "name": "Get user by ID | Negative tests",
      "item": [
        {
          "name": "User with 999 ID does not exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "999"
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": []
        },
        {
          "name": "User with empty ID does not exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": []
        },
        {
          "name": "Email parameter in request gives response with code 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:email",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":email"],
              "variable": [
                {
                  "key": "email",
                  "value": "{{registeredUsersEmail}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Firstname parameter in request gives response with code 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:firstname",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":firstname"],
              "variable": [
                {
                  "key": "firstname",
                  "value": "Moses"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Scenario: Failure to get any user data after using an invalid ID  \nGiven: an invalid user ID in the path parameter of the request  \nWhen: I send a GET request to the /users/{id} endpoint  \nThen: the response status should be 404  \nAnd: the response should not contain any user data",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "\r",
              "pm.test(\"Response does not contain any data\", function () {\r",
              "    pm.expect(pm.response.text().length).to.be.below(3);\r",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Create user | Positive tests",
      "item": [
        {
          "name": "Create user with random data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"id\": { \"type\": \"integer\", nullable: false },\r",
                  "        \"email\": { \"type\": \"string\", nullable: false },\r",
                  "        \"firstname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"lastname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"password\": { \"type\": \"string\", nullable: false },\r",
                  "        \"avatar\": { \"type\": \"string\", nullable: false }\r",
                  "    },\r",
                  "    \"required\": [\"id\", \"email\", \"firstname\", \"lastname\", \"password\", \"avatar\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains correct user data\", function () {\r",
                  "    pm.expect(responseJson.email).eqls(pm.variables.get('email'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.variables.get('firstname'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.variables.get('lastname'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.variables.get('avatar'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.variables.get('password'));\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "//generating random user data\r",
                  "pm.variables.set('email', pm.variables.replaceIn('{{$randomEmail}}'));\r",
                  "pm.variables.set('firstname', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
                  "pm.variables.set('lastname', pm.variables.replaceIn('{{$randomLastName}}'));\r",
                  "pm.variables.set('avatar', pm.variables.replaceIn('{{$randomAvatarImage}}'));\r",
                  "pm.variables.set('password', pm.variables.replaceIn('{{$randomPassword}}'));"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": [
            {
              "name": "Create user with random data",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Access-Control-Expose-Headers",
                  "value": "Location"
                },
                {
                  "key": "Location",
                  "value": "http://127.0.0.1:3000/api/users/22"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "248"
                },
                {
                  "key": "ETag",
                  "value": "W/\"f8-7ks3LUSorP4yd1EGvFOjejRS9pM\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:19:11 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"email\": \"Yasmeen_Gutmann@yahoo.com\",\n    \"firstname\": \"Margaretta\",\n    \"lastname\": \"Bode\",\n    \"avatar\": \"https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/680.jpg\",\n    \"password\": \"G5zEpmDUcng4AvX\",\n    \"id\": 22\n}"
            }
          ]
        }
      ],
      "description": "Scenario: Create a new user  \nGiven: the request body contains JSON with valid new user data  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 201  \nAnd: the response body should contain the newly created user data  \nAnd: the user should be created in the system"
    },
    {
      "name": "Create user | Negative tests",
      "item": [
        {
          "name": "Can't create user with already registered email",
          "item": [
            {
              "name": "Email already in use",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseSchema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"error\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "                \"message\": { \"type\": \"string\", nullable: false }\r",
                      "            },\r",
                      "            \"required\": [\"message\"]\r",
                      "        }\r",
                      "    },\r",
                      "    \"required\": [\"error\"]\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Response status code is 409\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(409);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    pm.response.to.has.jsonSchema(responseSchema);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is 'Email not unique'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Email not unique\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": [
                {
                  "name": "Email already in use",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Vary",
                      "value": "Origin, Accept-Encoding"
                    },
                    {
                      "key": "Access-Control-Allow-Credentials",
                      "value": "true"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache"
                    },
                    {
                      "key": "Pragma",
                      "value": "no-cache"
                    },
                    {
                      "key": "Expires",
                      "value": "-1"
                    },
                    {
                      "key": "Content-Security-Policy",
                      "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                    },
                    {
                      "key": "Cross-Origin-Embedder-Policy",
                      "value": "require-corp"
                    },
                    {
                      "key": "Cross-Origin-Opener-Policy",
                      "value": "same-origin"
                    },
                    {
                      "key": "Cross-Origin-Resource-Policy",
                      "value": "same-origin"
                    },
                    {
                      "key": "X-DNS-Prefetch-Control",
                      "value": "off"
                    },
                    {
                      "key": "X-Frame-Options",
                      "value": "SAMEORIGIN"
                    },
                    {
                      "key": "Strict-Transport-Security",
                      "value": "max-age=15552000; includeSubDomains"
                    },
                    {
                      "key": "X-Download-Options",
                      "value": "noopen"
                    },
                    {
                      "key": "X-Content-Type-Options",
                      "value": "nosniff"
                    },
                    {
                      "key": "Origin-Agent-Cluster",
                      "value": "?1"
                    },
                    {
                      "key": "X-Permitted-Cross-Domain-Policies",
                      "value": "none"
                    },
                    {
                      "key": "Referrer-Policy",
                      "value": "no-referrer"
                    },
                    {
                      "key": "X-XSS-Protection",
                      "value": "0"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "54"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"36-bp3+pjLS/NRu6AhTWl1U9yZxSfs\""
                    },
                    {
                      "key": "Date",
                      "value": "Sat, 08 Mar 2025 18:01:38 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": {\n        \"message\": \"Email not unique\"\n    }\n}"
                }
              ]
            }
          ],
          "description": "Scenario: Failed user creation with existing email  \nGiven: the request body contains JSON with the email of an existing user  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 409",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Can't create user with invalid email",
          "item": [
            {
              "name": "Email without @",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"user.gmail.com\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Email with space",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"u ser@gmail.com\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Email is null",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": null,\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Email contains only spaces",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"  \",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Email has non-text value",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": true,\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Email property contains an object",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": {\n        \"userMail\": \"user@gmail.com\"\n    },\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failed user creation with invalid email  \nGiven: the request body contains JSON with invalid email  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 422",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"properties\": {\r",
                  "                \"message\": { \"type\": \"string\", nullable: false }\r",
                  "            },\r",
                  "            \"required\": [\"message\"]\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\"error\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Response status code is 422\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'Invalid email'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Invalid email\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Can't create user with invalid property value",
          "item": [
            {
              "name": "Email is not a string",
              "item": [
                {
                  "name": "Email contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": [\n        \"user@gmail.com\",\n        \"user2@gamil.com\"\n    ],\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "First name is not a string",
              "item": [
                {
                  "name": "First name is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": null,\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "First name has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": true,\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "First name contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": [\n        \"John\",\n        \"David\"\n    ],\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "First name contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": {\n        \"user\": \"John\"\n    },\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Last name is not a string",
              "item": [
                {
                  "name": "Last name is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": null,\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Last name has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": true,\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Last name contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": [\n        \"Doe\",\n        \"Novak\"\n    ],\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Last name contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": {\n        \"user\": \"Doe\"\n    },\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Avatar is not a string",
              "item": [
                {
                  "name": "Avatar is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": null,\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Avatar has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": false,\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Avatar contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": [\n        \"{{$randomAvatarImage}}\",\n        \"{{$randomAvatarImage}}\"\n    ],\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Avatar contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": {\n        \"userAvatar\": \"{{$randomAvatarImage}}\"\n    },\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Password is not a string",
              "item": [
                {
                  "name": "Password is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": null\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Password has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": true\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Password contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": [\n        \"{{$randomPassword}}\",\n        \"{{$randomPassword}}\"\n    ]\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Password contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": {\n        \"isTestEnv\": true\n    }\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            }
          ],
          "description": "Scenario: Failed user creation with invalid data in request body  \nGiven: the JSON request body contains one property with invalid data  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 422  \nAnd: the response should contain the corresponding error message",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"properties\": {\r",
                  "                \"message\": { \"type\": \"string\" },\r",
                  "                \"details\": { \"type\": \"array\" }\r",
                  "            },\r",
                  "            \"required\": [\"message\", \"details\"]\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\"error\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Response status code is 422\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The details of the error are a array of mandatory properties\", function () {\r",
                  "    const responseArray = pm.response.json().error.details;\r",
                  "    const expectedArray = [\"firstname\", \"lastname\", \"email\", \"avatar\", \"password\"];\r",
                  "    pm.expect(_.isEqual(responseArray.sort(), expectedArray.sort())).to.be.true;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'Field value is not a string: undefined'\", function () {\r",
                  "    const errorObj = pm.response.json().error;\r",
                  "    pm.expect(errorObj.message).to.equal(\"Field value is not a string: undefined\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Can't create user without one of property",
          "item": [
            {
              "name": "Email not found",
              "item": [
                {
                  "name": "Email is empty",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email property in request is missing",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "First name not found",
              "item": [
                {
                  "name": "Firstname is empty",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Firstname property in request is missing",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Last name not found",
              "item": [
                {
                  "name": "Last name is empty",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Last name property in request is missing",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Avatar not found",
              "item": [
                {
                  "name": "Avatar is empty",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Avatar property in request is missing",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Password not found",
              "item": [
                {
                  "name": "Password is empty",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Password property in request is missing",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            }
          ],
          "description": "Scenario: Failed user creation with invalid data in request body  \nGiven: the JSON request body contains one property with invalid data  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 422  \nAnd: the response should contain the corresponding error message",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"properties\": {\r",
                  "                \"message\": { \"type\": \"string\" },\r",
                  "                \"details\": { \"type\": \"array\" }\r",
                  "            },\r",
                  "            \"required\": [\"message\", \"details\"]\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\"error\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response status code is 422\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'One of mandatory field is missing'\", function () {\r",
                  "    const errorObj = pm.response.json().error;\r",
                  "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The details of the error are a array of mandatory properties\", function () {\r",
                  "    const responseArray = pm.response.json().error.details;\r",
                  "    const expectedArray = [\"firstname\", \"lastname\", \"email\", \"avatar\", \"password\"];\r",
                  "    pm.expect(_.isEqual(responseArray.sort(), expectedArray.sort())).to.be.true;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Can't create user with additional properties",
          "item": [
            {
              "name": "Additional \"nickname\" property in request",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 422\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(422);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"nick\": \"SuperTester!\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failed user creation with additional unknown property  \nGiven: the request body contains an additional unknown property  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 422",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Can't create user with broken request",
          "item": [
            {
              "name": "Malformed JSON",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Mismatched Content-Type",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "content-type": true
                }
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "<!DOCTYPE html>\n<html>\n\n<head>\n\t<title>Page Title</title>\n</head>\n\n<body>\n\n\t<h1>This is a Heading</h1>\n\t<p>This is a paragraph.</p>\n\n</body>\n\n</html>",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "html"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failed user creation with broken request body  \nGiven: the request body is broken  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 400  \nAnd: the response should contain the corresponding error message",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": { \"type\": \"string\" },\r",
                  "        \"details\": { \"type\": \"string\" }\r",
                  "    },\r",
                  "    \"required\": [\"error\", \"details\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is correct\", function () {\r",
                  "    pm.expect(pm.response.json().error).to.equal(\"SyntaxError: Unexpected data in JSON. Please check Your JSON.\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Can't create user with wrong body",
          "item": [
            {
              "name": "Single object in the request body",
              "item": [
                {
                  "name": "Empty JSON object in body",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing 'Content-Type' header in request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {
                      "content-type": true
                    }
                  },
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "XML format instead of JSON in body",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "<email>{{$randomEmail}}</email>\r\n<firstname>{{$randomFirstName}}</firstname>\r\n<lastname>{{$randomLastName}}</lastname>\r\n<avatar>{{$randomAvatarImage}}</avatar>\r\n<password>{{$randomPassword}}\"</password>",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "xml"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty request body",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const responseSchema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"error\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "                \"message\": { \"type\": \"string\" },\r",
                      "                \"details\": { \"type\": \"array\" }\r",
                      "            },\r",
                      "            \"required\": [\"message\", \"details\"]\r",
                      "        }\r",
                      "    },\r",
                      "    \"required\": [\"error\"]\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Status code is 422\", function () {\r",
                      "    pm.response.to.have.status(422);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    pm.response.to.has.jsonSchema(responseSchema);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is 'One of mandatory field is missing'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"One of mandatory field is missing\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The details of the error are a array of mandatory properties\", function () {\r",
                      "    const responseArray = pm.response.json().error.details;\r",
                      "    const expectedArray = [\"firstname\", \"lastname\", \"email\", \"avatar\", \"password\"];\r",
                      "    pm.expect(_.isEqual(responseArray.sort(), expectedArray.sort())).to.be.true;\r",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Array in request body",
              "item": [
                {
                  "name": "Array instead of JSON object in body",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const responseSchema = {\r",
                          "    \"type\": \"object\",\r",
                          "    \"properties\": {\r",
                          "        \"error\": {\r",
                          "            \"type\": \"object\",\r",
                          "            \"properties\": {\r",
                          "                \"message\": { \"type\": \"string\" }\r",
                          "            },\r",
                          "            \"required\": [\"message\"]\r",
                          "        }\r",
                          "    },\r",
                          "    \"required\": [\"error\"]\r",
                          "};\r",
                          "\r",
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Response has valid schema\", function () {\r",
                          "    pm.response.to.has.jsonSchema(responseSchema);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"The error message is 'Bad request - malformed JSON'\", function () {\r",
                          "    pm.expect(pm.response.json().error.message).to.equal(\"Bad request - malformed JSON\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "[\r\n    {\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"firstname\": \"{{$randomFirstName}}\",\r\n        \"lastname\": \"{{$randomLastName}}\",\r\n        \"avatar\": \"{{$randomAvatarImage}}\",\r\n        \"password\": \"{{$randomPassword}}\"\r\n    },\r\n    {\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"firstname\": \"{{$randomFirstName}}\",\r\n        \"lastname\": \"{{$randomLastName}}\",\r\n        \"avatar\": \"{{$randomAvatarImage}}\",\r\n        \"password\": \"{{$randomPassword}}\"\r\n    }\r\n]",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            }
          ],
          "description": "Scenario: Failed user creation with incorrect request body format  \nGiven: the request body is in an incorrect format  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be a 4XX code"
        }
      ],
      "description": "Scenario: Failed user creation with invalid data  \nGiven: the request body contains JSON with invalid new user data  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be a 4XX code",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Full update of user data | E2E",
      "item": [
        {
          "name": "Create user with random data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains correct user data\", function () {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailBeforeChange'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameBeforeChange'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameBeforeChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarBeforeChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordBeforeChange'));\r",
                  "\r",
                  "    pm.collectionVariables.set('newUserID', responseJson.id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('emailBeforeChange', pm.variables.replaceIn('{{$randomEmail}}'));\r",
                  "pm.collectionVariables.set('firstnameBeforeChange', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
                  "pm.collectionVariables.set('lastnameBeforeChange', pm.variables.replaceIn('{{$randomLastName}}'));\r",
                  "pm.collectionVariables.set('avatarBeforeChange', pm.variables.replaceIn('{{$randomAvatarImage}}'));\r",
                  "pm.collectionVariables.set('passwordBeforeChange', pm.variables.replaceIn('{{$randomPassword}}'));"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailBeforeChange}}\",\n    \"firstname\": \"{{firstnameBeforeChange}}\",\n    \"lastname\": \"{{lastnameBeforeChange}}\",\n    \"avatar\": \"{{avatarBeforeChange}}\",\n    \"password\": \"{{passwordBeforeChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Receives a token for a new user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"access_token is a non-empty string\", function () {\r",
                  "    const token = pm.response.json().access_token;\r",
                  "    pm.expect(token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    pm.collectionVariables.set('newUserToken', token);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailBeforeChange}}\",\n    \"password\": \"{{passwordBeforeChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Update all user data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"id\": { \"type\": \"integer\", nullable: false },\r",
                  "        \"email\": { \"type\": \"string\", nullable: false },\r",
                  "        \"firstname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"lastname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"password\": { \"type\": \"string\", nullable: false },\r",
                  "        \"avatar\": { \"type\": \"string\", nullable: false }\r",
                  "    },\r",
                  "    \"required\": [\"id\", \"email\", \"firstname\", \"lastname\", \"password\", \"avatar\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user data\", function () {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailAfterChange'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameAfterChange'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameAfterChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarAfterChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordAfterChange'));\r",
                  "\r",
                  "    pm.collectionVariables.set('emailAfterChange', responseJson.email);\r",
                  "    pm.collectionVariables.set('passwordAfterChange', responseJson.password);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('emailAfterChange', pm.variables.replaceIn('{{$randomEmail}}'));\r",
                  "pm.collectionVariables.set('firstnameAfterChange', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
                  "pm.collectionVariables.set('lastnameAfterChange', pm.variables.replaceIn('{{$randomLastName}}'));\r",
                  "pm.collectionVariables.set('avatarAfterChange', pm.variables.replaceIn('{{$randomAvatarImage}}'));\r",
                  "pm.collectionVariables.set('passwordAfterChange', pm.variables.replaceIn('{{$randomPassword}}'));"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailAfterChange}}\",\n    \"firstname\": \"{{firstnameAfterChange}}\",\n    \"lastname\": \"{{lastnameAfterChange}}\",\n    \"avatar\": \"{{avatarAfterChange}}\",\n    \"password\": \"{{passwordAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "First name and avatar obtained by ID are updated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user data\", function () {\r",
                  "    pm.expect(pm.response.json().firstname).eqls(pm.collectionVariables.get('firstnameAfterChange'));\r",
                  "    pm.expect(pm.response.json().avatar).eqls(pm.collectionVariables.get('avatarAfterChange'));\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": []
        },
        {
          "name": "The token from before the data change is invalid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'Access token for given user is invalid!'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Access token for given user is invalid!\");\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {},
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Can't get token with user data before change",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The message is 'Incorrect email or password'\", function () {\r",
                  "    pm.expect(pm.response.json().message).to.equal(\"Incorrect email or password\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailBeforeChange}}\",\n    \"password\": \"{{passwordBeforeChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Successful login with new user data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"access_token is a non-empty string\", function () {\r",
                  "    const token = pm.response.json().access_token;\r",
                  "    pm.expect(token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailAfterChange}}\",\n    \"password\": \"{{passwordAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ],
      "description": "Scenario: Successfully update all user data and verify login with new credentials\n\nStep 1: Create a user\n\nGiven: the request body contains valid user data  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 201  \nAnd: the response should contain the newly created user data\n\nStep 2: Log in and obtain a token\n\nGiven: the request body contains the created user's valid credentials  \nWhen: I send a POST request to the /login endpoint  \nThen: the response status should be 200  \nAnd: the response should contain a token\n\nStep 3: Update user data using PUT method\n\nGiven: the user ID is in the path parameter and new valid user data is in the JSON body  \nWhen: I send a PUT request to the /users/{id} endpoint  \nThen: the response status should be 200  \nAnd: the response should contain the updated user data\n\nStep 4: Verify that login with old credentials fails\n\nWhen: I send a POST request to the /login endpoint with the old user credentials  \nThen: the response status should be 401  \nAnd: the response should contain an message indicating invalid credentials\n\nStep 5: Successfully log in with the updated user data\n\nWhen: I send a POST request to the /login endpoint with the new user credentials  \nThen: the response status should be 200  \nAnd: the response should contain a new token"
    },
    {
      "name": "Full update of user data | Negative tests",
      "item": [
        {
          "name": "Can't full update user data with already registered email",
          "item": [
            {
              "name": "Email already in use",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseSchema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"error\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "                \"message\": { \"type\": \"string\", nullable: false }\r",
                      "            },\r",
                      "            \"required\": [\"message\"]\r",
                      "        }\r",
                      "    },\r",
                      "    \"required\": [\"error\"]\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Response status code is 409\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(409);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    pm.response.to.has.jsonSchema(responseSchema);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is 'Email not unique'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Email not unique\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Email already in use",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Vary",
                      "value": "Origin, Accept-Encoding"
                    },
                    {
                      "key": "Access-Control-Allow-Credentials",
                      "value": "true"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache"
                    },
                    {
                      "key": "Pragma",
                      "value": "no-cache"
                    },
                    {
                      "key": "Expires",
                      "value": "-1"
                    },
                    {
                      "key": "Content-Security-Policy",
                      "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                    },
                    {
                      "key": "Cross-Origin-Embedder-Policy",
                      "value": "require-corp"
                    },
                    {
                      "key": "Cross-Origin-Opener-Policy",
                      "value": "same-origin"
                    },
                    {
                      "key": "Cross-Origin-Resource-Policy",
                      "value": "same-origin"
                    },
                    {
                      "key": "X-DNS-Prefetch-Control",
                      "value": "off"
                    },
                    {
                      "key": "X-Frame-Options",
                      "value": "SAMEORIGIN"
                    },
                    {
                      "key": "Strict-Transport-Security",
                      "value": "max-age=15552000; includeSubDomains"
                    },
                    {
                      "key": "X-Download-Options",
                      "value": "noopen"
                    },
                    {
                      "key": "X-Content-Type-Options",
                      "value": "nosniff"
                    },
                    {
                      "key": "Origin-Agent-Cluster",
                      "value": "?1"
                    },
                    {
                      "key": "X-Permitted-Cross-Domain-Policies",
                      "value": "none"
                    },
                    {
                      "key": "Referrer-Policy",
                      "value": "no-referrer"
                    },
                    {
                      "key": "X-XSS-Protection",
                      "value": "0"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "54"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"36-bp3+pjLS/NRu6AhTWl1U9yZxSfs\""
                    },
                    {
                      "key": "Date",
                      "value": "Sat, 08 Mar 2025 18:01:38 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": {\n        \"message\": \"Email not unique\"\n    }\n}"
                }
              ]
            }
          ],
          "description": "Scenario: Failed to update full user data with existing email  \nGiven: the request body contains JSON with the email of an existing user  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 409",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Can't full update user data with wrong property in JSON",
          "item": [
            {
              "name": "Email is invalid",
              "item": [
                {
                  "name": "Email without @",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"user.gmail.com\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email with space",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"u ser@gmail.com\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": null,\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email contains only spaces",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"  \",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": true,\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email property contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": {\n        \"userMail\": \"user@gmail.com\"\n    },\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"The error message is 'Invalid email'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Invalid email\");\r",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "One of mandatory property is invalid",
              "item": [
                {
                  "name": "Email is not a string",
                  "item": [
                    {
                      "name": "Email contains an array",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": [\n        \"user@gmail.com\",\n        \"user2@gamil.com\"\n    ],\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "First name is not a string",
                  "item": [
                    {
                      "name": "First name is null",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": null,\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "First name has non-text value",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": true,\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "First name contains an array",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": [\n        \"John\",\n        \"David\"\n    ],\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "First name contains an object",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": {\n        \"user\": \"John\"\n    },\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    }
                  ]
                },
                {
                  "name": "Last name is not a string",
                  "item": [
                    {
                      "name": "Last name is null",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": null,\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Last name has non-text value",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": true,\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Last name contains an array",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": [\n        \"Doe\",\n        \"Novak\"\n    ],\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Last name contains an object",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": {\n        \"user\": \"Doe\"\n    },\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    }
                  ]
                },
                {
                  "name": "Avatar is not a string",
                  "item": [
                    {
                      "name": "Avatar is null",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": null,\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Avatar has non-text value",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": false,\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Avatar contains an array",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": [\n        \"{{$randomAvatarImage}}\",\n        \"{{$randomAvatarImage}}\"\n    ],\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Avatar contains an object",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": {\n        \"userAvatar\": \"{{$randomAvatarImage}}\"\n    },\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    }
                  ]
                },
                {
                  "name": "Password is not a string",
                  "item": [
                    {
                      "name": "Null in password property",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": null\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Non-text password value",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": true\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Array of strings  in password property",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": [\n        \"{{$randomPassword}}\",\n        \"{{$randomPassword}}\"\n    ]\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Object in password property",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": {\n        \"isTestEnv\": true\n    }\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {\r",
                      "    const errorObj = pm.response.json().error;\r",
                      "    pm.expect(errorObj.message).to.equal(\"Field value is not a string: undefined\");\r",
                      "    pm.expect(errorObj.details).to.contains(\"firstname\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The details of the error are a array of mandatory properties\", function () {\r",
                      "    const responseArray = pm.response.json().error.details;\r",
                      "    const expectedArray = [\"firstname\", \"lastname\", \"email\", \"avatar\", \"password\"];\r",
                      "    pm.expect(_.isEqual(responseArray.sort(), expectedArray.sort())).to.be.true;\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ]
            },
            {
              "name": "One of mandatory property is missing",
              "item": [
                {
                  "name": "Email not found",
                  "item": [
                    {
                      "name": "Email is empty",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Email property in request is missing",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    }
                  ]
                },
                {
                  "name": "First name not found",
                  "item": [
                    {
                      "name": "First name is empty",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "First name property in request is missing",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    }
                  ]
                },
                {
                  "name": "Last name not found",
                  "item": [
                    {
                      "name": "Last name is empty",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Last name property in request is missing",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    }
                  ]
                },
                {
                  "name": "Avatar not found",
                  "item": [
                    {
                      "name": "Avatar is empty",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Avatar property in request is missing",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    }
                  ]
                },
                {
                  "name": "Password not found",
                  "item": [
                    {
                      "name": "Password is empty",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Password property in request is missing",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript",
                            "packages": {}
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\"\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/users/:id",
                          "host": ["{{baseUrl}}"],
                          "path": ["users", ":id"],
                          "variable": [
                            {
                              "key": "id",
                              "value": "{{newUserID}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [""]
                      }
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"The error message is 'One of mandatory field is missing'\", function () {\r",
                      "    const errorObj = pm.response.json().error;\r",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The details of the error are a array of mandatory properties\", function () {\r",
                      "    const responseArray = pm.response.json().error.details;\r",
                      "    const expectedArray = [\"firstname\", \"lastname\", \"email\", \"avatar\", \"password\"];\r",
                      "    pm.expect(_.isEqual(responseArray.sort(), expectedArray.sort())).to.be.true;\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ]
            }
          ],
          "description": "Scenario: Failure to update full user data with invalid property in request body  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and invalid data for one property in the JSON body of the request  \nWhen: I send a PUT request to the /users endpoint  \nThen: the response status should be a 4XX code  \nAnd: the response should contain an appropriate error message indicating the invalid property",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"properties\": {\r",
                  "                \"message\": { \"type\": \"string\", nullable: false }\r",
                  "            },\r",
                  "            \"required\": [\"message\"]\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\"error\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Response status code is 422\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Can't fully update user data with additional properties",
          "item": [
            {
              "name": "Additional \"nickname\" property",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseSchema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"error\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "                \"message\": { \"type\": \"string\" }\r",
                      "            },\r",
                      "            \"required\": [\"message\"]\r",
                      "        }\r",
                      "    },\r",
                      "    \"required\": [\"error\"]\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Status code is 422\", function () {\r",
                      "    pm.response.to.have.status(422);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    pm.response.to.has.jsonSchema(responseSchema);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is correct\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.includes(\"One of field is invalid (empty, invalid or too long) or there are some additional fields\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"nick\": \"SuperTester!\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update full user data with additional properties in request body  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and a request body with additional properties  \nWhen: I send a PUT request to the /users endpoint  \nThen: the response status should be 422  \nAnd: the response should contain an appropriate error message indicating the additional properties",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Can't full update user data with broken request",
          "item": [
            {
              "name": "Malformed JSON",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["login", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Mismatched Content-Type",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "content-type": true
                }
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "<!DOCTYPE html>\n<html>\n\n<head>\n\t<title>Page Title</title>\n</head>\n\n<body>\n\n\t<h1>This is a Heading</h1>\n\t<p>This is a paragraph.</p>\n\n</body>\n\n</html>",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "html"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["login", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update full user data with broken request body  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and a broken request body  \nWhen: I send a PUT request to the /users endpoint  \nThen: the response status should be 400  \nAnd: the response should contain an appropriate error message indicating a malformed request body",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is correct\", function () {\r",
                  "    pm.expect(pm.response.json().error).to.equal(\"SyntaxError: Unexpected data in JSON. Please check Your JSON.\");\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Can't full update user data with array in body",
          "item": [
            {
              "name": "Array instead of JSON object in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseSchema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"error\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "                \"message\": { \"type\": \"string\" }\r",
                      "            },\r",
                      "            \"required\": [\"message\"]\r",
                      "        }\r",
                      "    },\r",
                      "    \"required\": [\"error\"]\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    pm.response.to.has.jsonSchema(responseSchema);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is 'Bad request - malformed JSON'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Bad request - malformed JSON\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[\r\n    {\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"firstname\": \"{{$randomFirstName}}\",\r\n        \"lastname\": \"{{$randomLastName}}\",\r\n        \"avatar\": \"{{$randomAvatarImage}}\",\r\n        \"password\": \"{{$randomPassword}}\"\r\n    },\r\n    {\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"firstname\": \"{{$randomFirstName}}\",\r\n        \"lastname\": \"{{$randomLastName}}\",\r\n        \"avatar\": \"{{$randomAvatarImage}}\",\r\n        \"password\": \"{{$randomPassword}}\"\r\n    }\r\n]",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "**Scenario: Failed user data update with an array in the request body**\n\n**Given:** an existing user ID in the path parameter, valid token is in the \"Authorization\" header and an array instead of a valid JSON object in the request body  \n**When:** I send a PUT request to the `/users` endpoint  \n**Then:** the response status should be a 4XX code  \n**And:** the response should contain an appropriate error message indicating that the request body must be a JSON object, not an array"
        },
        {
          "name": "Can't full update user data with wrong body",
          "item": [
            {
              "name": "Empty JSON object in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Missing 'Content-Type' header in request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "content-type": true
                }
              },
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "XML format instead of JSON in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "<email>{{$randomEmail}}</email>\r\n<firstname>{{$randomFirstName}}</firstname>\r\n<lastname>{{$randomLastName}}</lastname>\r\n<avatar>{{$randomAvatarImage}}</avatar>\r\n<password>{{$randomPassword}}\"</password>",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "xml"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Empty request body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update full user data with incorrect body format  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and a request body in an incorrect format  \nWhen: I send a PUT request to the /users endpoint  \nThen: the response status should be 400  \nAnd: the response should contain an appropriate error message indicating incorrect body format",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//importing a library for date and time management\r",
                  "const moment = require('moment');\r",
                  "\r",
                  "//get data from environment\r",
                  "const baseURL = pm.variables.get(\"baseUrl\");\r",
                  "const token = pm.variables.get(\"token\");\r",
                  "const login = pm.environment.get(\"registeredUsersEmail\");\r",
                  "const password = pm.environment.get(\"correctUserPassword\");\r",
                  "const tokenGenerationMoment = pm.environment.get(\"tokenGenerationMoment\");\r",
                  "\r",
                  "const isTokenExpired = (!tokenGenerationMoment) || (moment(tokenGenerationMoment).isBefore(moment().subtract(15, 'minute')));\r",
                  "\r",
                  "if (!token || isTokenExpired || !tokenGenerationMoment) {\r",
                  "    console.info(\"Access token is empty or expired. Getting new token...\")\r",
                  "\r",
                  "    const options =\r",
                  "    {\r",
                  "        url: baseURL + \"/login\",\r",
                  "        method: 'POST',\r",
                  "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(\r",
                  "                {\r",
                  "                    \"email\": login,\r",
                  "                    \"password\": password\r",
                  "                }\r",
                  "            )\r",
                  "        }\r",
                  "    };\r",
                  "\r",
                  "    pm.sendRequest(options, function (err, res) {\r",
                  "        if (err) {\r",
                  "            console.error(\"An unexpected error occurred!!!\");\r",
                  "            console.error(err);\r",
                  "        }\r",
                  "        else if (res.code !== 200) {\r",
                  "            console.error(\"Failed to generate token!!!\");\r",
                  "            console.log(res.json().message);\r",
                  "        }\r",
                  "        else {\r",
                  "            const responseJson = res.json();\r",
                  "            pm.environment.set(\"token\", responseJson.access_token);\r",
                  "            pm.environment.set(\"tokenGenerationMoment\", moment());\r",
                  "            console.log(\"Token successfully generated and saved in environment variables.\");\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "};"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"properties\": {\r",
                  "                \"message\": {\r",
                  "                    \"type\": \"string\", nullable: false\r",
                  "                }\r",
                  "            },\r",
                  "            \"required\": [\r",
                  "                \"message\"\r",
                  "            ]\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\r",
                  "        \"error\"\r",
                  "    ]\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Response status code is 422\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'One of mandatory field is missing'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"One of mandatory field is missing\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The details of the error are a array of mandatory properties\", function () {\r",
                  "    const responseArray = pm.response.json().error.details;\r",
                  "    const expectedArray = [\"firstname\", \"lastname\", \"email\", \"avatar\", \"password\"];\r",
                  "    pm.expect(_.isEqual(responseArray.sort(), expectedArray.sort())).to.be.true;\r",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Can't full update user data with wrong ID",
          "item": [
            {
              "name": "Non-existing user ID",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "9999"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "ID does not belong to the logged in user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update full user data with incorrect ID in path parameter  \nGiven: an incorrect user ID in the path parameter, valid token is in the \"Authorization\" header and a valid request body  \nWhen: I send a PUT request to the /users/{id} endpoint  \nThen: the response status should be 401  \nAnd: the response should contain an appropriate error message indicating the invalid user ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'Access token for given user is invalid!'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Access token for given user is invalid!\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Can't full update user data with invalid user token",
          "item": [
            {
              "name": "No token",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Invalid token",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "wrong_token",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update full user data with invalid token  \nGiven: an invalid or expired token in the \"Authorization\" header, an existing user ID in the path parameter  \nWhen: I send a PUT request to the /users/{id} endpoint  \nThen: the response status should be 401  \nAnd: the response should contain an appropriate error message indicating the invalid token",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'Access token not provided!'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Access token not provided!\");\r",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Scenario: Failure to update full user data with invalid new data  \nGiven: an existing user ID in the path parameter and invalid user data in the JSON body of the request  \nWhen: I send a PUT request to the /users endpoint  \nThen: the response status should be a 4XX code  \nAnd: the response should contain an appropriate error message",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{testUserToken}}",
            "type": "string"
          }
        ]
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "//importing a library for date and time management\r",
              "const moment = require('moment');\r",
              "\r",
              "//get data from environment\r",
              "const baseURL = pm.variables.get(\"baseUrl\");\r",
              "const testUserToken = pm.collectionVariables.get('testUserToken');\r",
              "const newUserID = pm.collectionVariables.get(\"newUserID\");\r",
              "const tokenGenerationMoment = pm.collectionVariables.get(\"newUserTokenGenerationMoment\");\r",
              "\r",
              "const isTokenExpired = (!tokenGenerationMoment) || (moment(tokenGenerationMoment).isBefore(moment().subtract(45, 'minute')));\r",
              "\r",
              "if (!testUserToken || !newUserID || isTokenExpired) {\r",
              "    console.info('Creating new user for full user data update tests');\r",
              "    // data preparation\r",
              "    const testUserData = {\r",
              "        \"email\": pm.variables.replaceIn('{{$randomEmail}}'),\r",
              "        \"firstname\": pm.variables.replaceIn('{{$randomFirstName}}'),\r",
              "        \"lastname\": pm.variables.replaceIn('{{$randomLastName}}'),\r",
              "        \"avatar\": pm.variables.replaceIn('{{$randomAvatarImage}}'),\r",
              "        \"password\": pm.variables.replaceIn('{{$randomPassword}}')\r",
              "    };\r",
              "\r",
              "    const createUserOptions = {\r",
              "        url: baseURL + \"/users\",\r",
              "        method: 'POST',\r",
              "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
              "        body: { mode: 'raw', raw: JSON.stringify(testUserData) }\r",
              "    };\r",
              "\r",
              "    const receiveUserTokenOptions = {\r",
              "        url: baseURL + \"/login\",\r",
              "        method: 'POST',\r",
              "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
              "        body: {\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify(\r",
              "                {\r",
              "                    \"email\": testUserData.email,\r",
              "                    \"password\": testUserData.password\r",
              "                }\r",
              "            )\r",
              "        }\r",
              "    };\r",
              "\r",
              "    //creating a new user\r",
              "    pm.sendRequest(createUserOptions, function (err, res) {\r",
              "        if (err) {\r",
              "            console.error(\"An unexpected error occurred during user creation!\");\r",
              "            console.error(err);\r",
              "        }\r",
              "        else if (res.code !== 201) {\r",
              "            console.error(\"User creation failed!!!\");\r",
              "            console.error(res.json());\r",
              "        }\r",
              "        else {\r",
              "            console.log('New user created');\r",
              "            //getting a new token for a user\r",
              "            pm.sendRequest(receiveUserTokenOptions, function (tokenErr, tokenRes) {\r",
              "                if (tokenErr) {\r",
              "                    console.error(\"An unexpected error occurred during token generation!\");\r",
              "                    console.error(tokenErr);\r",
              "                }\r",
              "                else if (tokenRes.code !== 200) {\r",
              "                    console.error(\"Failed to generate token!!!\");\r",
              "                    console.log(res.json().message);\r",
              "                }\r",
              "                else {\r",
              "                    const responseJson = tokenRes.json();\r",
              "                    pm.collectionVariables.set(\"testUserToken\", responseJson.access_token);\r",
              "                    pm.collectionVariables.set(\"newUserID\", res.json().id);\r",
              "                    pm.collectionVariables.set(\"newUserTokenGenerationMoment\", moment());\r",
              "                    console.log(\"Token successfully generated and saved in collection variables.\");\r",
              "                }\r",
              "            });\r",
              "        }\r",
              "    });\r",
              "}\r",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "if (pm.response.code === 200){\r",
              "    console.info('Test user data changed, removing token from collection variables!');\r",
              "    pm.collectionVariables.unset('testUserToken');\r",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Partial update of user data | E2E",
      "item": [
        {
          "name": "Create user with random data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains correct user data\", function () {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailBeforeChange'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameBeforeChange'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameBeforeChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarBeforeChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordBeforeChange'));\r",
                  "\r",
                  "    pm.collectionVariables.set('newUserID', responseJson.id);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('emailBeforeChange', pm.variables.replaceIn('{{$randomEmail}}'));\r",
                  "pm.collectionVariables.set('firstnameBeforeChange', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
                  "pm.collectionVariables.set('lastnameBeforeChange', pm.variables.replaceIn('{{$randomLastName}}'));\r",
                  "pm.collectionVariables.set('avatarBeforeChange', pm.variables.replaceIn('{{$randomAvatarImage}}'));\r",
                  "pm.collectionVariables.set('passwordBeforeChange', pm.variables.replaceIn('{{$randomPassword}}'));"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailBeforeChange}}\",\n    \"firstname\": \"{{firstnameBeforeChange}}\",\n    \"lastname\": \"{{lastnameBeforeChange}}\",\n    \"avatar\": \"{{avatarBeforeChange}}\",\n    \"password\": \"{{passwordBeforeChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Receives a token for a new user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"access_token is a non-empty string\", function () {\r",
                  "    const token = pm.response.json().access_token;\r",
                  "    pm.expect(token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    pm.collectionVariables.set('newUserToken', token);\r",
                  "\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailBeforeChange}}\",\n    \"password\": \"{{passwordBeforeChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Update user email, first name and avatar",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user email, first name and avatar\", function () {\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailAfterChange'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameAfterChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarAfterChange'));\r",
                  "\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains not changed other user data\", function () {\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameBeforeChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordBeforeChange'));\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('emailAfterChange', pm.variables.replaceIn('{{$randomEmail}}'));\r",
                  "pm.collectionVariables.set('firstnameAfterChange', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
                  "pm.collectionVariables.set('avatarAfterChange', pm.variables.replaceIn('{{$randomAvatarImage}}'));\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailAfterChange}}\",\n    \"firstname\": \"{{firstnameAfterChange}}\",\n    \"avatar\": \"{{avatarAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "First name and avatar obtained by ID are updated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user data\", function () {\r",
                  "    pm.expect(pm.response.json().firstname).eqls(pm.collectionVariables.get('firstnameAfterChange'));\r",
                  "    pm.expect(pm.response.json().avatar).eqls(pm.collectionVariables.get('avatarAfterChange'));\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": []
        },
        {
          "name": "Can't get token with user data before change",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The message is 'Incorrect email or password'\", function () {\r",
                  "    pm.expect(pm.response.json().message).to.equal(\"Incorrect email or password\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailBeforeChange}}\",\n    \"password\": \"{{passwordBeforeChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Successful login with new user data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"access_token is a non-empty string\", function () {\r",
                  "    const token = pm.response.json().access_token;\r",
                  "    pm.expect(token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailAfterChange}}\",\n    \"password\": \"{{passwordBeforeChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ],
      "description": "**Scenario: End-to-End Partial Update of User Data**\n\n**Step 1: Create a new user**\n\n**Given:** I generate random user data  \n**When:** I send a `POST` request to the `/users` endpoint with the generated user data  \n**Then:** I receive a response with status **201** and a JSON body containing the created user data  \n**And:** the user is successfully stored in the system\n\n**Step 2: Authenticate the user and obtain a token**\n\n**When:** I send a `POST` request to the `/login` endpoint with the created user credentials  \n**Then:** I receive a response with status **200** and a valid authentication token\n\n**Step 3: Partially update the user data**\n\n**Given:** I have a valid authentication token  \n**When:** I send a `PATCH` request to the `/users` endpoint with updated **email, first name, and avatar**  \n**Then:** I receive a response with status **200** and a JSON body reflecting the updated user data\n\n**Step 4: Verify that user data has been updated**\n\n**When:** I send a `GET` request to the `/users/{id}` endpoint  \n**Then:** I receive a response with status **200**  \n**And:** the user data contains the updated **first name** and **avatar**\n\n**Step 5: Verify that the old credentials no longer work**\n\n**When:** I attempt to log in using the **old user credentials** (before update)  \n**Then:** I receive a response with status **401** and an error message indicating invalid credentials\n\n**Step 6: Verify that the updated credentials allow login**\n\n**When:** I send a `POST` request to the `/login` endpoint with the **newly updated user credentials**  \n**Then:** I receive a response with status **200**  \n**And:** a valid authentication token is returned",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Partial update of user data by PATCH | Positive tests",
      "item": [
        {
          "name": "Update user email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user email\", function () {\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailAfterChange'));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains not changed other user data\", function () {\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameBeforeChange'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameBeforeChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarBeforeChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordBeforeChange'));\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('emailAfterChange', pm.variables.replaceIn('{{$randomEmail}}'));"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update user first name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user first name\", function () {\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameAfterChange'));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains not changed other user data\", function () {\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailBeforeChange'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameBeforeChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarBeforeChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordBeforeChange'));\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('firstnameAfterChange', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstname\": \"{{firstnameAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update user last name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user last name\", function () {\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameAfterChange'));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains not changed other user data\", function () {\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailBeforeChange'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameBeforeChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarBeforeChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordBeforeChange'));\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('lastnameAfterChange', pm.variables.replaceIn('{{$randomLastName}}'));\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"lastname\": \"{{lastnameAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update user avatar",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user avatar\", function () {\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarAfterChange'));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains not changed other user data\", function () {\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailBeforeChange'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameBeforeChange'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameBeforeChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordBeforeChange'));\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('avatarAfterChange', pm.variables.replaceIn('{{$randomAvatarImage}}'));\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"avatar\": \"{{avatarAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update user password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains new user password\", function () {\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordAfterChange'));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains not changed other user data\", function () {\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailBeforeChange'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameBeforeChange'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameBeforeChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarBeforeChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarBeforeChange'));\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('passwordAfterChange', pm.variables.replaceIn('{{$randomPassword}}'));\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{passwordAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update all user data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response contains new user data\", function () {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson.email).eqls(pm.collectionVariables.get('emailAfterChange'));\r",
                  "    pm.expect(responseJson.firstname).eqls(pm.collectionVariables.get('firstnameAfterChange'));\r",
                  "    pm.expect(responseJson.lastname).eqls(pm.collectionVariables.get('lastnameAfterChange'));\r",
                  "    pm.expect(responseJson.avatar).eqls(pm.collectionVariables.get('avatarAfterChange'));\r",
                  "    pm.expect(responseJson.password).eqls(pm.collectionVariables.get('passwordAfterChange'));\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('emailAfterChange', pm.variables.replaceIn('{{$randomEmail}}'));\r",
                  "pm.collectionVariables.set('firstnameAfterChange', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
                  "pm.collectionVariables.set('lastnameAfterChange', pm.variables.replaceIn('{{$randomLastName}}'));\r",
                  "pm.collectionVariables.set('avatarAfterChange', pm.variables.replaceIn('{{$randomAvatarImage}}'));\r",
                  "pm.collectionVariables.set('passwordAfterChange', pm.variables.replaceIn('{{$randomPassword}}'));"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{newUserToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{emailAfterChange}}\",\n    \"firstname\": \"{{firstnameAfterChange}}\",\n    \"lastname\": \"{{lastnameAfterChange}}\",\n    \"avatar\": \"{{avatarAfterChange}}\",\n    \"password\": \"{{passwordAfterChange}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{newUserID}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "### **Scenario: Successfully Perform a Partial Update of User Data**\n\n**Given:** an existing user ID in the system and a valid authentication token,  \n**When:** I send a `PATCH` request to the `/users/{id}` endpoint with an update to one property,  \n**Then:** the response status should be **200**,  \n**And:** the response should contain the updated property with the new value,  \n**And:** all other user data should remain unchanged.\n\nNote: Before each test, a new test user is created.",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "//get data from environment\r",
              "const baseURL = pm.variables.get(\"baseUrl\");\r",
              "\r",
              "// data preparation\r",
              "const testUserData = {\r",
              "    \"email\": pm.variables.replaceIn('{{$randomEmail}}'),\r",
              "    \"firstname\": pm.variables.replaceIn('{{$randomFirstName}}'),\r",
              "    \"lastname\": pm.variables.replaceIn('{{$randomLastName}}'),\r",
              "    \"avatar\": pm.variables.replaceIn('{{$randomAvatarImage}}'),\r",
              "    \"password\": pm.variables.replaceIn('{{$randomPassword}}')\r",
              "};\r",
              "\r",
              "//request data preparation\r",
              "const createUserOptions = {\r",
              "    url: baseURL + \"/users\",\r",
              "    method: 'POST',\r",
              "    header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
              "    body: { mode: 'raw', raw: JSON.stringify(testUserData) }\r",
              "};\r",
              "\r",
              "const tokenOptions =\r",
              "{\r",
              "    url: baseURL + \"/login\",\r",
              "    method: 'POST',\r",
              "    header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
              "    body: {\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(\r",
              "            {\r",
              "                \"email\": testUserData.email,\r",
              "                \"password\": testUserData.password\r",
              "            }\r",
              "        )\r",
              "    }\r",
              "};\r",
              "\r",
              "//creating a new user\r",
              "pm.sendRequest(createUserOptions, function (err, res) {\r",
              "    if (err) {\r",
              "        console.error(\"An unexpected error occurred during user creation!\");\r",
              "        console.error(err);\r",
              "    }\r",
              "    else if (res.code !== 201) {\r",
              "        console.error(\"User creation failed!!!\");\r",
              "        console.error(res.json());\r",
              "    }\r",
              "    else {\r",
              "        console.log('New user created');\r",
              "        const newUserDataJson = res.json();\r",
              "        //setting variables with new user data\r",
              "        pm.collectionVariables.set('newUserID', newUserDataJson.id);\r",
              "        pm.collectionVariables.set('emailBeforeChange', newUserDataJson.email);\r",
              "        pm.collectionVariables.set('firstnameBeforeChange', newUserDataJson.firstname);\r",
              "        pm.collectionVariables.set('lastnameBeforeChange', newUserDataJson.lastname);\r",
              "        pm.collectionVariables.set('avatarBeforeChange', newUserDataJson.avatar);\r",
              "        pm.collectionVariables.set('passwordBeforeChange', newUserDataJson.password);\r",
              "\r",
              "        //getting a new token for a user\r",
              "        pm.sendRequest(tokenOptions, function (tokenErr, tokenRes) {\r",
              "            if (tokenErr) {\r",
              "                console.error(\"An unexpected error occurred during token generation!\");\r",
              "                console.error(tokenErr);\r",
              "            }\r",
              "            else if (tokenRes.code !== 200) {\r",
              "                console.error(\"Failed to generate token!!!\");\r",
              "                console.log(res.json().message);\r",
              "            }\r",
              "            else {\r",
              "                const responseJson = tokenRes.json();\r",
              "                pm.collectionVariables.set(\"newUserToken\", responseJson.access_token);\r",
              "                console.log(\"Token successfully generated and saved in collection variables.\");\r",
              "            }\r",
              "        });\r",
              "    }\r",
              "});"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "const responseSchema = {\r",
              "    \"type\": \"object\",\r",
              "    \"properties\": {\r",
              "        \"id\": { \"type\": \"integer\", nullable: false },\r",
              "        \"email\": { \"type\": \"string\", nullable: false },\r",
              "        \"firstname\": { \"type\": \"string\", nullable: false },\r",
              "        \"lastname\": { \"type\": \"string\", nullable: false },\r",
              "        \"password\": { \"type\": \"string\", nullable: false },\r",
              "        \"avatar\": { \"type\": \"string\", nullable: false }\r",
              "    },\r",
              "    \"required\": [\"id\", \"email\", \"firstname\", \"lastname\", \"password\", \"avatar\"]\r",
              "};\r",
              "\r",
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Response has valid schema\", function () {\r",
              "    pm.response.to.has.jsonSchema(responseSchema);\r",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Partial update of user data by PATCH | Negative tests",
      "item": [
        {
          "name": "Can't update user data with already registered email",
          "item": [
            {
              "name": "Email already in use",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseSchema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"error\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "                \"message\": { \"type\": \"string\", nullable: false }\r",
                      "            },\r",
                      "            \"required\": [\"message\"]\r",
                      "        }\r",
                      "    },\r",
                      "    \"required\": [\"error\"]\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Response status code is 409\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(409);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    pm.response.to.has.jsonSchema(responseSchema);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is 'Email not unique'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Email not unique\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Email already in use",
                  "originalRequest": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{registeredUsersEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users",
                      "host": ["{{baseUrl}}"],
                      "path": ["users"]
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Vary",
                      "value": "Origin, Accept-Encoding"
                    },
                    {
                      "key": "Access-Control-Allow-Credentials",
                      "value": "true"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache"
                    },
                    {
                      "key": "Pragma",
                      "value": "no-cache"
                    },
                    {
                      "key": "Expires",
                      "value": "-1"
                    },
                    {
                      "key": "Content-Security-Policy",
                      "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                    },
                    {
                      "key": "Cross-Origin-Embedder-Policy",
                      "value": "require-corp"
                    },
                    {
                      "key": "Cross-Origin-Opener-Policy",
                      "value": "same-origin"
                    },
                    {
                      "key": "Cross-Origin-Resource-Policy",
                      "value": "same-origin"
                    },
                    {
                      "key": "X-DNS-Prefetch-Control",
                      "value": "off"
                    },
                    {
                      "key": "X-Frame-Options",
                      "value": "SAMEORIGIN"
                    },
                    {
                      "key": "Strict-Transport-Security",
                      "value": "max-age=15552000; includeSubDomains"
                    },
                    {
                      "key": "X-Download-Options",
                      "value": "noopen"
                    },
                    {
                      "key": "X-Content-Type-Options",
                      "value": "nosniff"
                    },
                    {
                      "key": "Origin-Agent-Cluster",
                      "value": "?1"
                    },
                    {
                      "key": "X-Permitted-Cross-Domain-Policies",
                      "value": "none"
                    },
                    {
                      "key": "Referrer-Policy",
                      "value": "no-referrer"
                    },
                    {
                      "key": "X-XSS-Protection",
                      "value": "0"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "54"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"36-bp3+pjLS/NRu6AhTWl1U9yZxSfs\""
                    },
                    {
                      "key": "Date",
                      "value": "Sat, 08 Mar 2025 18:01:38 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": {\n        \"message\": \"Email not unique\"\n    }\n}"
                }
              ]
            }
          ],
          "description": "Scenario: Failed to update user email with already existing email  \nGiven: the request body contains JSON with the email of an existing user  \nWhen: I send a PATCH request to the /users endpoint  \nThen: the response status should be 409",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Can't update user data with wrong property in JSON",
          "item": [
            {
              "name": "Email is invalid",
              "item": [
                {
                  "name": "Email without @",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"user.gmail.com\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email with space",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"u ser@gmail.com\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": null\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email contains only spaces",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"  \"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": true\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email property contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": {\n        \"userMail\": \"user@gmail.com\"\n    },\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Email contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": [\n        \"user@gmail.com\",\n        \"user2@gamil.com\"\n    ],\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"The error message is 'Invalid email'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Invalid email\");\r",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "First name is invalid",
              "item": [
                {
                  "name": "First name is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": null,\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "First name has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": true,\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "First name contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": [\n        \"John\",\n        \"David\"\n    ],\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "First name contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": {\n        \"user\": \"John\"\n    },\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Last name is invalid",
              "item": [
                {
                  "name": "Last name is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": null,\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Last name has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": true,\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Last name contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": [\n        \"Doe\",\n        \"Novak\"\n    ],\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Last name contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": {\n        \"user\": \"Doe\"\n    },\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Avatar is invalid",
              "item": [
                {
                  "name": "Avatar is null",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": null,\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Avatar has non-text value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": false,\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Avatar contains an array",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": [\n        \"{{$randomAvatarImage}}\",\n        \"{{$randomAvatarImage}}\"\n    ],\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Avatar contains an object",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": {\n        \"userAvatar\": \"{{$randomAvatarImage}}\"\n    },\n    \"password\": \"{{$randomPassword}}\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "Password is invalid",
              "item": [
                {
                  "name": "Null in password property",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": null\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Non-text password value",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": true\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Array of strings  in password property",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": [\n        \"{{$randomPassword}}\",\n        \"{{$randomPassword}}\"\n    ]\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Object in password property",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": {\n        \"isTestEnv\": true\n    }\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:id",
                      "host": ["{{baseUrl}}"],
                      "path": ["users", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{newUserID}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ],
          "description": "Scenario: Failure to update user data with invalid property in request body  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and invalid data for one property in the JSON body of the request  \nWhen: I send a PATCH request to the /users endpoint  \nThen: the response status should be a 4XX code  \nAnd: the response should contain an appropriate error message indicating the invalid property",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"properties\": {\r",
                  "                \"message\": { \"type\": \"string\", nullable: false }\r",
                  "            },\r",
                  "            \"required\": [\"message\"]\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\"error\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Response status code is 422\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Can't update user data with empty string in JSON",
          "item": [
            {
              "name": "Avatar is empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Password is empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "First name is empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Last name is empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Email is empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update user data with empty sting in request body  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and invalid data for one property in the JSON body of the request  \nWhen: I send a PATCH request to the /users endpoint  \nThen: the response status should be a 422 code  \nAnd: the response should contain an appropriate error message indicating the invalid property",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"properties\": {\r",
                  "                \"message\": { \"type\": \"string\", nullable: false }\r",
                  "            },\r",
                  "            \"required\": [\"message\"]\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\"error\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Response status code is 422\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is correct\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.includes(\"One of field is invalid (empty, invalid or too long) or there are some additional fields\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Can't update user data with additional properties",
          "item": [
            {
              "name": "Additional \"nickname\" property",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseSchema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"error\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "                \"message\": { \"type\": \"string\" }\r",
                      "            },\r",
                      "            \"required\": [\"message\"]\r",
                      "        }\r",
                      "    },\r",
                      "    \"required\": [\"error\"]\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Status code is 422\", function () {\r",
                      "    pm.response.to.have.status(422);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    pm.response.to.has.jsonSchema(responseSchema);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is correct\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.includes(\"One of field is invalid (empty, invalid or too long) or there are some additional fields\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"nick\": \"SuperTester!\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update user data with additional properties in request body  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and a request body with additional properties  \nWhen: I send a PATCH request to the /users endpoint  \nThen: the response status should be 422  \nAnd: the response should contain an appropriate error message indicating the additional properties",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Can't update user data with broken request",
          "item": [
            {
              "name": "Malformed JSON",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["login", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Mismatched Content-Type",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "content-type": true
                }
              },
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "<!DOCTYPE html>\n<html>\n\n<head>\n\t<title>Page Title</title>\n</head>\n\n<body>\n\n\t<h1>This is a Heading</h1>\n\t<p>This is a paragraph.</p>\n\n</body>\n\n</html>",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "html"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["login", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update user data with broken request body  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and a broken request body  \nWhen: I send a PATCH request to the /users endpoint  \nThen: the response status should be 400  \nAnd: the response should contain an appropriate error message indicating a malformed request body",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is correct\", function () {\r",
                  "    pm.expect(pm.response.json().error).to.equal(\"SyntaxError: Unexpected data in JSON. Please check Your JSON.\");\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Can't update user data with array in body",
          "item": [
            {
              "name": "Array instead of JSON object in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseSchema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"error\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "                \"message\": { \"type\": \"string\" }\r",
                      "            },\r",
                      "            \"required\": [\"message\"]\r",
                      "        }\r",
                      "    },\r",
                      "    \"required\": [\"error\"]\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has valid schema\", function () {\r",
                      "    pm.response.to.has.jsonSchema(responseSchema);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is 'Bad request - malformed JSON'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Bad request - malformed JSON\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[\r\n    {\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"firstname\": \"{{$randomFirstName}}\",\r\n        \"lastname\": \"{{$randomLastName}}\",\r\n        \"avatar\": \"{{$randomAvatarImage}}\",\r\n        \"password\": \"{{$randomPassword}}\"\r\n    },\r\n    {\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"firstname\": \"{{$randomFirstName}}\",\r\n        \"lastname\": \"{{$randomLastName}}\",\r\n        \"avatar\": \"{{$randomAvatarImage}}\",\r\n        \"password\": \"{{$randomPassword}}\"\r\n    }\r\n]",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "**Scenario: Failed user data update with an array in the request body**\n\n**Given:** an existing user ID in the path parameter, valid token is in the \"Authorization\" header and an array instead of a valid JSON object in the request body  \n**When:** I send a PATCH request to the `/users` endpoint  \n**Then:** the response status should be a 4XX code  \n**And:** the response should contain an appropriate error message indicating that the request body must be a JSON object, not an array"
        },
        {
          "name": "Can't update user data with wrong body",
          "item": [
            {
              "name": "Empty JSON object in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Missing 'Content-Type' header in request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "content-type": true
                }
              },
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "XML format instead of JSON in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "<email>{{$randomEmail}}</email>\r\n<firstname>{{$randomFirstName}}</firstname>\r\n<lastname>{{$randomLastName}}</lastname>\r\n<avatar>{{$randomAvatarImage}}</avatar>\r\n<password>{{$randomPassword}}\"</password>",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "xml"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Empty request body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update user data with incorrect body format  \nGiven: an existing user ID in the path parameter, valid token is in the \"Authorization\" header and a request body in an incorrect format  \nWhen: I send a PATCH request to the /users endpoint  \nThen: the response status should be 422  \nAnd: the response should contain an appropriate error message",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//importing a library for date and time management\r",
                  "const moment = require('moment');\r",
                  "\r",
                  "//get data from environment\r",
                  "const baseURL = pm.variables.get(\"baseUrl\");\r",
                  "const token = pm.variables.get(\"token\");\r",
                  "const login = pm.environment.get(\"registeredUsersEmail\");\r",
                  "const password = pm.environment.get(\"correctUserPassword\");\r",
                  "const tokenGenerationMoment = pm.environment.get(\"tokenGenerationMoment\");\r",
                  "\r",
                  "const isTokenExpired = (!tokenGenerationMoment) || (moment(tokenGenerationMoment).isBefore(moment().subtract(15, 'minute')));\r",
                  "\r",
                  "if (!token || isTokenExpired || !tokenGenerationMoment) {\r",
                  "    console.info(\"Access token is empty or expired. Getting new token...\")\r",
                  "\r",
                  "    const options =\r",
                  "    {\r",
                  "        url: baseURL + \"/login\",\r",
                  "        method: 'POST',\r",
                  "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(\r",
                  "                {\r",
                  "                    \"email\": login,\r",
                  "                    \"password\": password\r",
                  "                }\r",
                  "            )\r",
                  "        }\r",
                  "    };\r",
                  "\r",
                  "    pm.sendRequest(options, function (err, res) {\r",
                  "        if (err) {\r",
                  "            console.error(\"An unexpected error occurred!!!\");\r",
                  "            console.error(err);\r",
                  "        }\r",
                  "        else if (res.code !== 200) {\r",
                  "            console.error(\"Failed to generate token!!!\");\r",
                  "            console.log(res.json().message);\r",
                  "        }\r",
                  "        else {\r",
                  "            const responseJson = res.json();\r",
                  "            pm.environment.set(\"token\", responseJson.access_token);\r",
                  "            pm.environment.set(\"tokenGenerationMoment\", moment());\r",
                  "            console.log(\"Token successfully generated and saved in environment variables.\");\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "};"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"error\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"properties\": {\r",
                  "                \"message\": {\r",
                  "                    \"type\": \"string\", nullable: false\r",
                  "                }\r",
                  "            },\r",
                  "            \"required\": [\r",
                  "                \"message\"\r",
                  "            ]\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\r",
                  "        \"error\"\r",
                  "    ]\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Response status code is 422\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'No fields were provided! Field validation: no fields present in body'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"No fields were provided! Field validation: no fields present in body\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Can't update user data with wrong ID",
          "item": [
            {
              "name": "Non-existing user ID",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "9999"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "ID does not belong to the logged in user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update user data with incorrect ID in path parameter  \nGiven: an incorrect user ID in the path parameter, valid token is in the \"Authorization\" header and a valid request body  \nWhen: I send a PATCH request to the /users/{id} endpoint  \nThen: the response status should be 401  \nAnd: the response should contain an appropriate error message indicating the invalid user ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'Access token for given user is invalid!'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Access token for given user is invalid!\");\r",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Can't update user data with invalid user token",
          "item": [
            {
              "name": "No token",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Invalid token",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "wrong_token",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{newUserID}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failure to update user data with invalid token  \nGiven: an invalid or expired token in the \"Authorization\" header, an existing user ID in the path parameter  \nWhen: I send a PATCH request to the /users/{id} endpoint  \nThen: the response status should be 401  \nAnd: the response should contain an appropriate error message indicating the invalid token",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The error message is 'Access token not provided!'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Access token not provided!\");\r",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Scenario: Failed partial update of user data due to invalid property value  \nGiven: an existing user ID in the system and a valid authentication token,  \nWhen: I send a PATCH request to the /users/{id} endpoint with an update for one property using an invalid value,  \nThen: the response status should be a 4XX code,  \nAnd: the response should contain an error message indicating the invalid property value,  \nAnd: the user data should remain unchanged.\n\nNote:\n\nIf the user token is invalid or the test user's data has changed as a result of the test, a new test user is created",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{testUserToken}}",
            "type": "string"
          }
        ]
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "//importing a library for date and time management\r",
              "const moment = require('moment');\r",
              "\r",
              "//get data from environment\r",
              "const baseURL = pm.variables.get(\"baseUrl\");\r",
              "const testUserToken = pm.collectionVariables.get('testUserToken');\r",
              "const newUserID = pm.collectionVariables.get(\"newUserID\");\r",
              "const tokenGenerationMoment = pm.collectionVariables.get(\"newUserTokenGenerationMoment\");\r",
              "\r",
              "const isTokenExpired = (!tokenGenerationMoment) || (moment(tokenGenerationMoment).isBefore(moment().subtract(45, 'minute')));\r",
              "\r",
              "if (!testUserToken || !newUserID || isTokenExpired) {\r",
              "    console.info('Creating new user for full user data update tests');\r",
              "    // data preparation\r",
              "    const testUserData = {\r",
              "        \"email\": pm.variables.replaceIn('{{$randomEmail}}'),\r",
              "        \"firstname\": pm.variables.replaceIn('{{$randomFirstName}}'),\r",
              "        \"lastname\": pm.variables.replaceIn('{{$randomLastName}}'),\r",
              "        \"avatar\": pm.variables.replaceIn('{{$randomAvatarImage}}'),\r",
              "        \"password\": pm.variables.replaceIn('{{$randomPassword}}')\r",
              "    };\r",
              "\r",
              "    const createUserOptions = {\r",
              "        url: baseURL + \"/users\",\r",
              "        method: 'POST',\r",
              "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
              "        body: { mode: 'raw', raw: JSON.stringify(testUserData) }\r",
              "    };\r",
              "\r",
              "    const receiveUserTokenOptions = {\r",
              "        url: baseURL + \"/login\",\r",
              "        method: 'POST',\r",
              "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
              "        body: {\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify(\r",
              "                {\r",
              "                    \"email\": testUserData.email,\r",
              "                    \"password\": testUserData.password\r",
              "                }\r",
              "            )\r",
              "        }\r",
              "    };\r",
              "\r",
              "    //creating a new user\r",
              "    pm.sendRequest(createUserOptions, function (err, res) {\r",
              "        if (err) {\r",
              "            console.error(\"An unexpected error occurred during user creation!\");\r",
              "            console.error(err);\r",
              "        }\r",
              "        else if (res.code !== 201) {\r",
              "            console.error(\"User creation failed!!!\");\r",
              "            console.error(res.json());\r",
              "        }\r",
              "        else {\r",
              "            console.log('New user created');\r",
              "            //getting a new token for a user\r",
              "            pm.sendRequest(receiveUserTokenOptions, function (tokenErr, tokenRes) {\r",
              "                if (tokenErr) {\r",
              "                    console.error(\"An unexpected error occurred during token generation!\");\r",
              "                    console.error(tokenErr);\r",
              "                }\r",
              "                else if (tokenRes.code !== 200) {\r",
              "                    console.error(\"Failed to generate token!!!\");\r",
              "                    console.log(res.json().message);\r",
              "                }\r",
              "                else {\r",
              "                    const responseJson = tokenRes.json();\r",
              "                    pm.collectionVariables.set(\"testUserToken\", responseJson.access_token);\r",
              "                    pm.collectionVariables.set(\"newUserID\", res.json().id);\r",
              "                    pm.collectionVariables.set(\"newUserTokenGenerationMoment\", moment());\r",
              "                    console.log(\"Token successfully generated and saved in collection variables.\");\r",
              "                }\r",
              "            });\r",
              "        }\r",
              "    });\r",
              "}\r",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "if (pm.response.code === 200){\r",
              "    console.info('Test user data changed, removing token from collection variables!');\r",
              "    pm.collectionVariables.unset('testUserToken');\r",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete user | E2E",
      "item": [
        {
          "name": "Create user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set('userToBeDeletedID', pm.response.json().id);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('userToBeDeletedEmail',  pm.variables.replaceIn('{{$randomEmail}}'));\r",
                  "\r",
                  "pm.collectionVariables.set('userToBeDeletedPassword',  pm.variables.replaceIn('{{$randomPassword}}'));"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userToBeDeletedEmail}}\",\n  \"firstname\": \"{{$randomFirstName}}\",\n  \"lastname\": \"{{$randomLastName}}\",\n  \"avatar\": \"{{$randomAvatarImage}}\",\n  \"password\": \"{{userToBeDeletedPassword}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Login as user to receive token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseJson;\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseJson = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"access_token is a non-empty string\", function () {\r",
                  "    pm.expect(responseJson.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "\r",
                  "    //setting env variable with token\r",
                  "    pm.collectionVariables.set('userToBeDeletedToken', responseJson.access_token);\r",
                  "\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true
            }
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{userToBeDeletedEmail}}\",\n    \"password\": \"{{userToBeDeletedPassword}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Delete a user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToBeDeletedToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{userToBeDeletedID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Deleted user not present in users list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The array of all users does not contain the id of the deleted user\", function () {\r",
                  "    let userID = pm.collectionVariables.get('userToBeDeletedID');\r",
                  "    let users = pm.response.json();\r",
                  "    _.each(users, (user) => {\r",
                  "        pm.expect(user.id).not.eql(userID);\r",
                  "    });\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Deleted user not found by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404, user not found\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{userToBeDeletedID}}"
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": []
        },
        {
          "name": "Deleted user's token is invalid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"The error message is 'Access token for given user is invalid!'\", function () {\r",
                  "    pm.expect(pm.response.json().error.message).to.equal(\"Access token for given user is invalid!\");\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {},
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToBeDeletedToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Token is not generated for deleted user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401, user not found\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.clear();"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{userToBeDeletedEmail}}\",\r\n    \"password\": \"{{userToBeDeletedPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Returns a single user"
          },
          "response": []
        }
      ],
      "description": "Scenario: Successfully delete a user and verify the deletion\n\nStep 1: Create a user\n\nGiven: the request body contains valid user data  \nWhen: I send a POST request to the /users endpoint  \nThen: the response status should be 201  \nAnd: the response should contain the newly created user data\n\nStep 2: Log in and obtain a token\n\nGiven: the request body contains the created user's valid credentials  \nWhen: I send a POST request to the /login endpoint  \nThen: the response status should be 200  \nAnd: the response should contain a token\n\nStep 3: Delete the user\n\nGiven: the user ID is in the path parameter and the valid token is in the \"Authorization\" header  \nWhen: I send a DELETE request to the /users/{id} endpoint  \nThen: the response status should be 200\n\nStep 4: Verify user is no longer visible in the user list\n\nWhen: I send a GET request to the /users endpoint  \nThen: the response status should be 200  \nAnd: the response should not contain the deleted user's data\n\nStep 5: Verify deleted user cannot be retrieved by ID\n\nWhen: I send a GET request to the /users/{id} endpoint  \nThen: the response status should be 404\n\nStep 6: Verify new token cannot be generated for deleted user\n\nWhen: I send a POST request to the /login endpoint with the deleted user's credentials  \nThen: the response status should be 401  \nAnd: the response should contain an error message indicating the credentials are no longer valid"
    },
    {
      "name": "Delete user | Negative tests",
      "item": [
        {
          "name": "Authorized user can't delete user with wrong ID | Negative tests",
          "item": [
            {
              "name": "Delete not existing user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "999"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete other user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is 'Access token for given user is invalid!'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Access token for given user is invalid!\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete user with empty ID",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "   "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete user without ID param",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ""]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failed user deletion due to non-existent user ID  \nGiven: a non-existent user ID in the path parameter and valid token is in the \"Authorization\" header  \nWhen: I send a DELETE request to the /users/{non-existent-id} endpoint  \nThen: the response status should be 4xx  \nAnd: the response should contain an error message indicating the user is not found",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "key": "token",
                "value": "{{token}}",
                "type": "string"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//importing a library for date and time management\r",
                  "const moment = require('moment');\r",
                  "\r",
                  "//get data from environment\r",
                  "const baseURL = pm.variables.get(\"baseUrl\");\r",
                  "const token = pm.variables.get(\"token\");\r",
                  "const login = pm.environment.get(\"registeredUsersEmail\");\r",
                  "const password = pm.environment.get(\"correctUserPassword\");\r",
                  "const tokenGenerationMoment = pm.environment.get(\"tokenGenerationMoment\");\r",
                  "\r",
                  "const isTokenExpired = (!tokenGenerationMoment) || (moment(tokenGenerationMoment).isBefore(moment().subtract(50, 'minute')));\r",
                  "\r",
                  "if (!token || isTokenExpired) {\r",
                  "    console.info(\"Access token is empty or expired. Getting new token...\")\r",
                  "\r",
                  "    const options =\r",
                  "    {\r",
                  "        url: baseURL + \"/login\",\r",
                  "        method: 'POST',\r",
                  "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(\r",
                  "                {\r",
                  "                    \"email\": login,\r",
                  "                    \"password\": password\r",
                  "                }\r",
                  "            )\r",
                  "        }\r",
                  "    };\r",
                  "\r",
                  "    pm.sendRequest(options, function (err, res) {\r",
                  "        if (err) {\r",
                  "            console.error(err);\r",
                  "        }\r",
                  "        else if (res.code !== 200) {\r",
                  "            console.error(\"Failed to generate token!!!\");\r",
                  "            console.log(res.json().message);\r",
                  "        }\r",
                  "        else {\r",
                  "            const responseJson = res.json();\r",
                  "            pm.environment.set(\"token\", responseJson.access_token);\r",
                  "            pm.environment.set(\"tokenGenerationMoment\", moment());\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "};"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Unauthorized user can't delete user with given ID | Negative tests",
          "item": [
            {
              "name": "Delete a user without token",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The error message is 'Access token not provided!'\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Access token not provided!\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{existingUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete not existing user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "999"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete user with empty ID",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "  "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete user without ID param",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ""]
                }
              },
              "response": []
            }
          ],
          "description": "Scenario: Failed user deletion due to invalid token  \nGiven: an invalid token in the \"Authorization\" header  \nAnd: an existing user ID in the path parameter  \nWhen: I send a DELETE request to the /users/{id} endpoint  \nThen: the response status should be 4xx  \nAnd: the response should contain an error message indicating the invalid token",
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        }
      ],
      "description": "Scenario: Failed user deletion due to invalid token or non-existent user ID\n\nTest for non-existent user ID\n\nGiven: a non-existent user ID in the path parameter  \nWhen: I send a DELETE request to the /users/{non-existent-id} endpoint  \nThen: the response status should be 4xx  \nAnd: the response should contain an error message indicating the user is not found\n\nTest for invalid token\n\nGiven: an invalid token in the \"Authorization\" header  \nAnd: an existing user ID in the path parameter  \nWhen: I send a DELETE request to the /users/{id} endpoint  \nThen: the response status should be 4xx  \nAnd: the response should contain an error message indicating the invalid token"
    },
    {
      "name": "Get info about user | Positive tests",
      "item": [
        {
          "name": "Get info about existing user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{existingUserID}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Scenario: Verify if a user exists\n\nGiven: an existing user ID in the path parameter  \nWhen: I send a HEAD request to the /users/{id} endpoint  \nThen: the response status should be 200",
      "auth": {
        "type": "noauth"
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Get info about user | Negative tests",
      "item": [
        {
          "name": "No info about user with non-existent ID",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "9999"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "No info after request with empty ID parameter",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "No info after request without ID parameter",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "No info after request with email parameter",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:email",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":email"],
              "variable": [
                {
                  "key": "email",
                  "value": "{{registeredUsersEmail}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Scenario: Sending an incorrect ID does not give information that the user exists\n\nGiven: a wrong user ID in the path parameter  \nWhen: I send a HEAD request to the /users/{id} endpoint  \nThen: the response status should be 404",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});"
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "//displaying the request name in the console for better tracking of test execution\r",
          "console.log(`Running request: \\\"${pm.info.requestName}\\\"`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "testUserToken",
      "value": ""
    },
    {
      "key": "newUserID",
      "value": ""
    },
    {
      "key": "newUserTokenGenerationMoment",
      "value": ""
    }
  ]
}
