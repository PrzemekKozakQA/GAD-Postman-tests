{
  "info": {
    "_postman_id": "15492e8c-108d-4f50-a993-a205bfa0b8ee",
    "name": "/users endpoint tests  [GitHub Actions]",
    "description": "Collection of tests for the GAD application endpoint /users.  \nGAD documentation available at:  \n[https://github.com/jaktestowac/gad-gui-api-demo](https://github.com/jaktestowac/gad-gui-api-demo)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21196236"
  },
  "item": [
    {
      "name": "Get users - positive",
      "item": [
        {
          "name": "Get all users list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData;\r",
                  "\r",
                  "const responseSchema = {\r",
                  "    \"type\": \"array\",\r",
                  "    \"items\": {\r",
                  "        \"type\": \"object\",\r",
                  "        \"properties\": {\r",
                  "            \"id\": { \"type\": \"integer\", nullable: false },\r",
                  "            \"email\": { \"type\": \"string\", nullable: false },\r",
                  "            \"firstname\": { \"type\": \"string\", nullable: false },\r",
                  "            \"lastname\": { \"type\": \"string\", nullable: false },\r",
                  "            \"password\": { \"type\": \"string\", nullable: false },\r",
                  "            \"avatar\": { \"type\": \"string\", nullable: false }\r",
                  "        },\r",
                  "        \"required\": [\"id\", \"email\", \"firstname\", \"lastname\", \"password\", \"avatar\"]\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseData = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response is not an empty array\", function () {\r",
                  "    pm.expect(responseData).to.be.an('array').and.to.have.length.above(0);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": [
            {
              "name": "Get all users list",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Sun, 03 Sep 2023 13:27:39 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "CF-Ray",
                  "value": "800e54d5efd53bc0-WAW"
                },
                {
                  "key": "CF-Cache-Status",
                  "value": "DYNAMIC"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "ETag",
                  "value": "W/\"6e9-O+pK+G2gX34KvIU0wKYoz+X81L4\""
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "access-control-allow-credentials",
                  "value": "true"
                },
                {
                  "key": "content-security-policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "cross-origin-embedder-policy",
                  "value": "require-corp"
                },
                {
                  "key": "cross-origin-opener-policy",
                  "value": "same-origin"
                },
                {
                  "key": "cross-origin-resource-policy",
                  "value": "same-origin"
                },
                {
                  "key": "origin-agent-cluster",
                  "value": "?1"
                },
                {
                  "key": "pragma",
                  "value": "no-cache"
                },
                {
                  "key": "referrer-policy",
                  "value": "no-referrer"
                },
                {
                  "key": "x-content-type-options",
                  "value": "nosniff"
                },
                {
                  "key": "x-dns-prefetch-control",
                  "value": "off"
                },
                {
                  "key": "x-download-options",
                  "value": "noopen"
                },
                {
                  "key": "x-frame-options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "x-permitted-cross-domain-policies",
                  "value": "none"
                },
                {
                  "key": "x-render-origin-server",
                  "value": "Render"
                },
                {
                  "key": "x-xss-protection",
                  "value": "0"
                },
                {
                  "key": "Server",
                  "value": "cloudflare"
                },
                {
                  "key": "Content-Encoding",
                  "value": "br"
                },
                {
                  "key": "alt-svc",
                  "value": "h3=\":443\"; ma=86400"
                }
              ],
              "cookie": [],
              "body": "[\n    {\n        \"id\": 1,\n        \"email\": \"****\",\n        \"firstname\": \"Moses\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133479.7144732.jpg\"\n    },\n    {\n        \"id\": 2,\n        \"email\": \"****\",\n        \"firstname\": \"Danial\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133060.68834.jpg\"\n    },\n    {\n        \"id\": 3,\n        \"email\": \"****\",\n        \"firstname\": \"Daryl\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133063.620005.jpg\"\n    },\n    {\n        \"id\": 4,\n        \"email\": \"****\",\n        \"firstname\": \"Dortha\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133112.3790507.jpg\"\n    },\n    {\n        \"id\": 5,\n        \"email\": \"****\",\n        \"firstname\": \"Lenore\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133153.523801.jpg\"\n    },\n    {\n        \"id\": 6,\n        \"email\": \"****\",\n        \"firstname\": \"Kerra\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133363.1959925.jpg\"\n    },\n    {\n        \"id\": 7,\n        \"email\": \"****\",\n        \"firstname\": \"Mas\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591133217.1529467.jpg\"\n    },\n    {\n        \"id\": 8,\n        \"email\": \"****\",\n        \"firstname\": \"Josh\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591134851.6068161.jpg\"\n    },\n    {\n        \"id\": 9,\n        \"email\": \"****\",\n        \"firstname\": \"Daryl\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591134851.6068265.jpg\"\n    },\n    {\n        \"id\": 10,\n        \"email\": \"****\",\n        \"firstname\": \"John\",\n        \"lastname\": \"****\",\n        \"password\": \"****\",\n        \"avatar\": \".\\\\data\\\\users\\\\face_1591137202.609116_1.jpg\"\n    }\n]"
            }
          ]
        }
      ]
    },
    {
      "name": "Get user by ID - positive",
      "item": [
        {
          "name": "Get user by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData;\r",
                  "\r",
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"id\": { \"type\": \"integer\", nullable: false },\r",
                  "        \"email\": { \"type\": \"string\", nullable: false },\r",
                  "        \"firstname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"lastname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"password\": { \"type\": \"string\", nullable: false },\r",
                  "        \"avatar\": { \"type\": \"string\", nullable: false }\r",
                  "    },\r",
                  "    \"required\": [\"id\", \"email\", \"firstname\", \"lastname\", \"password\", \"avatar\"]\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseData = pm.response.json()\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema)\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.unset('userID')"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{existingUserID}}"
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": [
            {
              "name": "Get user by ID",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{existingUserID}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "159"
                },
                {
                  "key": "ETag",
                  "value": "W/\"9f-+Ei5pNyIj1bC/N0M7Jkw7d3zqj0\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:17:05 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"id\": 1,\n    \"email\": \"****\",\n    \"firstname\": \"Moses\",\n    \"lastname\": \"****\",\n    \"password\": \"****\",\n    \"avatar\": \".\\\\data\\\\users\\\\face_1591133479.7144732.jpg\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Get user by ID - negative",
      "item": [
        {
          "name": "User with 999 ID does not exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "999"
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": []
        },
        {
          "name": "User with empty ID does not exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Returns a single user"
          },
          "response": []
        },
        {
          "name": "Email parameter in request results response with code 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:email",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":email"],
              "variable": [
                {
                  "key": "email",
                  "value": "{{registeredUsersEmail}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Firstname parameter in request results response with code 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:firstname",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":firstname"],
              "variable": [
                {
                  "key": "firstname",
                  "value": "Moses"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Status code is 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Create user - positive",
      "item": [
        {
          "name": "Create user with random data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let responseData;\r",
                  "\r",
                  "const responseSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "        \"id\": { \"type\": \"integer\", nullable: false },\r",
                  "        \"email\": { \"type\": \"string\", nullable: false },\r",
                  "        \"firstname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"lastname\": { \"type\": \"string\", nullable: false },\r",
                  "        \"password\": { \"type\": \"string\", nullable: false },\r",
                  "        \"avatar\": { \"type\": \"string\", nullable: false }\r",
                  "    },\r",
                  "    \"required\": [\"id\", \"email\", \"firstname\", \"lastname\", \"password\", \"avatar\"]\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "    responseData = pm.response.json();\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response has valid schema\", function () {\r",
                  "    pm.response.to.has.jsonSchema(responseSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains correct user data\", function () {\r",
                  "    pm.expect(responseData.email).eqls(pm.variables.get('email'));\r",
                  "    pm.expect(responseData.firstname).eqls(pm.variables.get('firstname'));\r",
                  "    pm.expect(responseData.lastname).eqls(pm.variables.get('lastname'));\r",
                  "    pm.expect(responseData.avatar).eqls(pm.variables.get('avatar'));\r",
                  "    pm.expect(responseData.password).eqls(pm.variables.get('password'));\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.variables.set('email', pm.variables.replaceIn('{{$randomEmail}}'))\r",
                  "pm.variables.set('firstname', pm.variables.replaceIn('{{$randomFirstName}}'))\r",
                  "pm.variables.set('lastname', pm.variables.replaceIn('{{$randomLastName}}'))\r",
                  "pm.variables.set('avatar', pm.variables.replaceIn('{{$randomAvatarImage}}'))\r",
                  "pm.variables.set('password', pm.variables.replaceIn('{{$randomPassword}}'))"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": [
            {
              "name": "Create user with random data",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\",\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\",\n    \"avatar\": \"{{avatar}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Vary",
                  "value": "Origin, X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Content-Security-Policy",
                  "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                },
                {
                  "key": "Cross-Origin-Embedder-Policy",
                  "value": "require-corp"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=15552000; includeSubDomains"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "no-referrer"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0"
                },
                {
                  "key": "Access-Control-Expose-Headers",
                  "value": "Location"
                },
                {
                  "key": "Location",
                  "value": "http://127.0.0.1:3000/api/users/22"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "248"
                },
                {
                  "key": "ETag",
                  "value": "W/\"f8-7ks3LUSorP4yd1EGvFOjejRS9pM\""
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Mar 2025 19:19:11 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5"
                }
              ],
              "cookie": [],
              "body": "{\n    \"email\": \"Yasmeen_Gutmann@yahoo.com\",\n    \"firstname\": \"Margaretta\",\n    \"lastname\": \"Bode\",\n    \"avatar\": \"https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/680.jpg\",\n    \"password\": \"G5zEpmDUcng4AvX\",\n    \"id\": 22\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Create user - negative [TODO]",
      "item": [
        {
          "name": "Invalid email",
          "item": [
            {
              "name": "Cannot create user with invalid email",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {\r",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Invalid email\");\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"user.gmail.com\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Cannot create user with email filled with spaces",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    pm.expect(pm.response.json().error.message).to.equal(\"Invalid email\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"  \",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Cannot create user with empty email",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    const errorObj = pm.response.json().error;",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");",
                      "    pm.expect(errorObj.details).to.contains(\"email\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"\",\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Cannot create user with null email",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    const errorObj = pm.response.json().error;",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");",
                      "    pm.expect(errorObj.details).to.contains(\"email\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": null,\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Cannot create user without email property in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    const errorObj = pm.response.json().error;",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");",
                      "    pm.expect(errorObj.details).to.contains(\"email\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Cannot create user with non text  email property in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    const errorObj = pm.response.json().error;",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");",
                      "    pm.expect(errorObj.details).to.contains(\"email\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": true,\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Invalid first name",
          "item": [
            {
              "name": "Cannot create user with empty first name",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    const errorObj = pm.response.json().error;",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");",
                      "    pm.expect(errorObj.details).to.contains(\"firstname\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": \"\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Cannot create user without firstname property in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    const errorObj = pm.response.json().error;",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");",
                      "    pm.expect(errorObj.details).to.contains(\"firstname\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Cannot create user with non text  firstname property in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    const errorObj = pm.response.json().error;",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");",
                      "    pm.expect(errorObj.details).to.contains(\"email\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": null,\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Cannot create user with null  firstname in body",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["//{{$randomEmail}}\r", ""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"The error message is correct\", function () {",
                      "    const errorObj = pm.response.json().error;",
                      "    pm.expect(errorObj.message).to.equal(\"One of mandatory field is missing\");",
                      "    pm.expect(errorObj.details).to.contains(\"email\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstname\": null,\n    \"lastname\": \"{{$randomLastName}}\",\n    \"avatar\": \"{{$randomAvatarImage}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "invalid last name",
          "item": []
        },
        {
          "name": "invalid avatar",
          "item": []
        },
        {
          "name": "invalid password",
          "item": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "const responseSchema = {\r",
              "    \"type\": \"object\",\r",
              "    \"properties\": {\r",
              "        \"error\": {\r",
              "            \"type\": \"object\",\r",
              "            \"properties\": {\r",
              "                \"message\": {\r",
              "                    \"type\": \"string\", nullable: false\r",
              "                }\r",
              "            },\r",
              "            \"required\": [\r",
              "                \"message\"\r",
              "            ]\r",
              "        }\r",
              "    },\r",
              "    \"required\": [\r",
              "        \"error\"\r",
              "    ]\r",
              "}\r",
              "\r",
              "pm.test(\"Response status code is 422\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(422);\r",
              "});\r",
              "\r",
              "pm.test(\"Response has valid schema\", function () {\r",
              "    pm.response.to.has.jsonSchema(responseSchema);\r",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete user - positive",
      "item": [
        {
          "name": "Delete created user E2E - positive",
          "item": [
            {
              "name": "Create user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set('userToBeDeletedID', pm.response.json().id);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set('userToBeDeletedEmail',  pm.variables.replaceIn('{{$randomEmail}}'))\r",
                      "\r",
                      "pm.collectionVariables.set('userToBeDeletedPassword',  pm.variables.replaceIn('{{$randomPassword}}'))"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{userToBeDeletedEmail}}\",\n  \"firstname\": \"{{$randomFirstName}}\",\n  \"lastname\": \"{{$randomLastName}}\",\n  \"avatar\": \"{{$randomAvatarImage}}\",\n  \"password\": \"{{userToBeDeletedPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Login as user to receive token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "let responseData;\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    responseData = pm.response.json()\r",
                      "});\r",
                      "\r",
                      "pm.test(\"access_token is a non-empty string\", function () {\r",
                      "    pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "\r",
                      "    //setting env variable with token\r",
                      "    pm.collectionVariables.set('userToBeDeletedToken', responseData.access_token);\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "accept": true
                }
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{userToBeDeletedEmail}}\",\n    \"password\": \"{{userToBeDeletedPassword}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Delete a user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{userToBeDeletedToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{userToBeDeletedID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Deleted user not present in user list",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The list of all users does not contain the id of the deleted user\", function () {\r",
                      "    let userID = pm.collectionVariables.get('userToBeDeletedID');\r",
                      "    let users = pm.response.json();\r",
                      "    _.each(users, (user) => {\r",
                      "        pm.expect(user.id).not.eql(userID);\r",
                      "    });\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": ["{{baseUrl}}"],
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Deleted user not found by ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404, user not found\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{userToBeDeletedID}}"
                    }
                  ]
                },
                "description": "Returns a single user"
              },
              "response": []
            },
            {
              "name": "Token is not generated for deleted user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401, user not found\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.clear();"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"{{userToBeDeletedEmail}}\",\r\n    \"password\": \"{{userToBeDeletedPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                },
                "description": "Returns a single user"
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Delete user - negative",
      "item": [
        {
          "name": "Authorized user can not delete user with wrong ID - negative",
          "item": [
            {
              "name": "Delete not existing user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "999"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete other user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete user with empty ID",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete user without ID param",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ""]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "key": "token",
                "value": "{{token}}",
                "type": "string"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//importing a library for date and time management\r",
                  "const moment = require('moment');\r",
                  "\r",
                  "//get data from environment\r",
                  "const baseURL = pm.variables.get(\"baseUrl\");\r",
                  "var token = pm.variables.get(\"token\");\r",
                  "const login = pm.environment.get(\"registeredUsersEmail\");\r",
                  "const password = pm.environment.get(\"correctUserPassword\");\r",
                  "var tokenGenerationMoment = pm.environment.get(\"tokenGenerationMoment\");\r",
                  "\r",
                  "var isTokenExpired = (!tokenGenerationMoment) || (moment(tokenGenerationMoment).isBefore(moment().subtract(15, 'minute')));\r",
                  "\r",
                  "if (!token || isTokenExpired || !tokenGenerationMoment) {\r",
                  "    console.info(\"Access token is empty or expired. Getting new token...\")\r",
                  "\r",
                  "    const options =\r",
                  "    {\r",
                  "        url: baseURL + \"/login\",\r",
                  "        method: 'POST',\r",
                  "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(\r",
                  "                {\r",
                  "                    \"email\": login,\r",
                  "                    \"password\": password\r",
                  "                }\r",
                  "            )\r",
                  "        }\r",
                  "    };\r",
                  "\r",
                  "    pm.sendRequest(options, function (err, res) {\r",
                  "        if (err) {\r",
                  "            console.error(\"An unexpected error occurred!!!\");\r",
                  "            console.error(err);\r",
                  "        }\r",
                  "        else if (res.code !== 200) {\r",
                  "            console.error(\"Failed to generate token!!!\");\r",
                  "            console.log(res.json().message);\r",
                  "        }\r",
                  "        else {\r",
                  "            var jsonData = res.json();\r",
                  "            pm.environment.set(\"token\", jsonData.access_token);\r",
                  "            pm.environment.set(\"tokenGenerationMoment\", moment());\r",
                  "            console.log(\"Token successfully generated and saved in environment variables.\");\r",
                  "        }\r",
                  "    });\r",
                  "\r",
                  "};"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Unauthorized  user can not delete user with given ID - negative",
          "item": [
            {
              "name": "Delete a user without token",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{existingUserID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete not existing user",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "999"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete user with empty ID",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete user without ID param",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const baseURL = pm.variables.get(\"baseUrl\");\r",
                      "\r",
                      "const login = 'admin' \r",
                      "const password = 'admin' \r",
                      "\r",
                      "    const options =\r",
                      "    {\r",
                      "        url: baseURL + \"/login\",\r",
                      "        method: 'POST',\r",
                      "        header: { 'content-type': 'application/json', 'accept': 'application/json' },\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(\r",
                      "                {\r",
                      "                    \"email\": login,\r",
                      "                    \"password\": password\r",
                      "                }\r",
                      "            )\r",
                      "        }\r",
                      "    };\r",
                      "\r",
                      "    pm.sendRequest(options, function (err, res) {\r",
                      "        if (err) {\r",
                      "            console.log(err);\r",
                      "        }\r",
                      "        else {\r",
                      "            var jsonData = res.json();\r",
                      "            pm.variables.set(\"adminToken\", jsonData.access_token);\r",
                      "        }\r",
                      "    });"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/",
                  "host": ["{{baseUrl}}"],
                  "path": ["users", ""]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "noauth"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "packages": {},
                "exec": [""]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Get info about user",
      "item": [
        {
          "name": "Get info about existing user",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{existingUserID}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get info about no existing user - negative",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "9999"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get info about  user with empty id param - negative",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get info about  user without id param - negative",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get info about  user without email param - negative",
          "request": {
            "method": "HEAD",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:email",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":email"],
              "variable": [
                {
                  "key": "email",
                  "value": "{{registeredUsersEmail}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Full user data update by PUT [TODO]",
      "item": []
    },
    {
      "name": "partial user data update - PATH [TODO]",
      "item": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "//displaying the request name in the console for better tracking of test execution\r",
          "console.log(pm.info.requestName);"
        ],
        "type": "text/javascript"
      }
    }
  ]
}
